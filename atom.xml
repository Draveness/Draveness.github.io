<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DeltaX]]></title>
  <subtitle><![CDATA[为了成为牛逼闪闪的工程师]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://deltax.me/"/>
  <updated>2015-03-25T12:44:29.000Z</updated>
  <id>http://deltax.me/</id>
  
  <author>
    <name><![CDATA[Draven]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hexo中LateX的使用]]></title>
    <link href="http://deltax.me/2015/03/25/Hexo%E4%B8%ADLateX%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://deltax.me/2015/03/25/Hexo中LateX的使用/</id>
    <published>2015-03-25T12:22:48.000Z</published>
    <updated>2015-03-25T12:44:29.000Z</updated>
    <content type="html"><![CDATA[<p>我使用 <code>Hexo</code> 已经有很长时间了, 最近升级到 3.0 问题实在是太多. 不过实在是不想在折腾回去了.</p>
<p>最近在学习算法导论, 需要解决很多的公式问题, 所以, 我求助于 <code>LaTeX</code>. <code>LaTeX</code> 是一种基于 <code>TEX</code> 的排版. 我们可以使用它来生成许多的数学公式. 我在这里就简单介绍一下如何使用好了.</p>
<h1 id="准备工作">准备工作</h1><p>如果你是用的 <code>Hexo</code> 主题是 <code>Jacman</code>, 那么非常简单, 你只需要在 <code>front-matter</code> 中添加:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mathjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这样就可以在 markdown 中随意使用 <code>LaTeX</code> 了, 对于我来说, 我直接找到主题资源文件中与 MathJax 有关的代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes<span class="regexp">/jacman/</span>layout<span class="regexp">/_partial/m</span>athjax.ejs</span><br></pre></td></tr></table></figure>
<p>也就是这个文件, 删除掉第一行和最后一行, 也就是下面这两行.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="preprocessor">%</span> <span class="keyword">if</span> <span class="comment">(theme.mathjax || page.mathjax)</span>&#123; <span class="preprocessor">%</span>&gt;</span><br><span class="line">&lt;<span class="preprocessor">%</span> &#125; <span class="preprocessor">%</span>&gt;</span><br></pre></td></tr></table></figure>
<p>然后, 你就不要在每次添加 <code>mathjax: true</code> 了, 你也可以去更改你的模板 <code>scaffolds/post.md</code> 在其中加入 <code>mathjax: true</code>, 也可以省去每次添加的麻烦.</p>
<h1 id="LaTeX使用">LaTeX使用</h1><p>做好了准备工作之后, 我们就可以尝试在 post 中添加 <code>LaTeX</code> 公式了, 你可以上网找一些在线的 editor 帮助你写 <code>LaTeX</code> 公式.</p>
<p>我们做几个简单的演示:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$T</span>(n) = \<span class="function"><span class="title">Theta</span><span class="params">(n)</span></span>$</span><br></pre></td></tr></table></figure>
<p>$T(n) = \Theta(n)$</p>
<p><code>LaTeX</code> 需要使用 <code>$</code> 符号进行包围, 当我最开始使用的时候不知道在公式的两边都要加入 <code>$</code> 符号, 所以出现了这样的错误</p>
<p>$T(n) = \Theta(n)</p>
<p><code>LaTeX</code> 公式不会被渲染, 使用单个的 <code>$</code> 符号时时候, 我们可以在行内中添加, 但是如果想在整行内使用, 我们使用双 <code>$</code> 符号, 也就是:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="variable">$T</span>(n) = \<span class="function"><span class="title">Theta</span><span class="params">(n)</span></span>$$</span><br></pre></td></tr></table></figure>
<p>$$T(n) = \Theta(n)$$</p>
<p>更多的使用方法以及文档可以访问 <a href="https://www.mathjax.org/" target="_blank" rel="external">MathJax</a>.</p>
<h1 id="LaTeX使用的问题">LaTeX使用的问题</h1><p>我在是用LaTeX的过程中遇到了这样一种问题, 当我使用下面这个公式的时候, <code>LaTeX</code> 公式不会被渲染.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="label">$T</span>(<span class="keyword">n</span>) = \Theta(<span class="keyword">n</span>) + \sum_&#123;i=0&#125;^&#123;<span class="keyword">n</span>-1&#125;&#123;O(&#123;<span class="keyword">n</span>&#125;_&#123;i&#125;^2)&#125;$$</span><br></pre></td></tr></table></figure>
<p>$$T(n) = \Theta(n) + \sum<em>{i=0}^{n-1}{O({n}</em>{i}^2)}$$</p>
<p>我在官网上尝试了一下, 发现这个公式是完全正确的, 当时百思不得其解, 后来突然发现这个公式的中间部分 <code>{i=0}^{n-1}{O({n}</code> 竟然是倾斜的.</p>
<p>在 Markdown 中, <code>_ _</code> 表示的是中间部分的倾斜, 所以我就将这个公式改成了:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="label">$T</span>(<span class="keyword">n</span>) = \Theta(<span class="keyword">n</span>) + \<span class="keyword">sum</span>\_&#123;i=0&#125;^&#123;<span class="keyword">n</span>-1&#125;&#123;O(&#123;<span class="keyword">n</span>&#125;\_&#123;i&#125;^2)&#125;$$</span><br></pre></td></tr></table></figure>
<p>加了两个用于转义的 <code>\</code> 符号, 这样, 公式就可以正确的显示了.</p>
<p>$$T(n) = \Theta(n) + \sum_{i=0}^{n-1}{O({n}_{i}^2)}$$</p>
<h1 id="结束">结束</h1><p>初次体验感觉 <code>LaTeX</code> 还是很强大的, 可以非常轻易的表示各种各样的数学公式, 不过遇到比较复杂的公式, 还是很难一次性完成的, 而且对于已经写好的 <code>LaTeX</code>, 有的实在太过于庞大并且复杂了, 完全无法理解到底是什么意思.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我使用 <code>Hexo</code> 已经有很长时间了, 最近升级到 3.0 问题实在是太多. 不过实在是不想在折腾回去了.</p>
<p>最近在学习算法导论, 需要解决很多的公式问题, 所以, 我求助于 <code>LaTeX</code>. <code>LaTeX]]>
    </summary>
    
      <category term="Hexo" scheme="http://deltax.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[线性时间排序]]></title>
    <link href="http://deltax.me/2015/03/25/%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
    <id>http://deltax.me/2015/03/25/线性时间排序/</id>
    <published>2015-03-25T08:20:40.000Z</published>
    <updated>2015-03-25T12:22:06.000Z</updated>
    <content type="html"><![CDATA[<p>我们把在排序的最终结果中, 各元素的次序依赖于它们的比较的排序算法称为<strong>比较排序</strong>. 而我们在这里介绍的排序将不依赖于元素之间的比较.</p>
<p>第一次听到这种说法感觉非常的神奇和震惊, 而在以前的认识中, 排序都是基于比较的. 不经过比较怎么排序, 而这一章线性时间排序就改变了我过去对排序的浅显的认识.</p>
<h1 id="比较排序算法的下届">比较排序算法的下届</h1><p>我们如何才能使排序的时间复杂度达到线性呢, 能否通过元素之间的比较产生一种排序时间复杂度为线性的算法呢.</p>
<p>结论是: 不可能, 比较排序算法最坏情况下的时间复杂度的下届为 $\Theta\left(n\lg n\right)$. 这是为什么呢, 我们可以用<a href="http://zh.wikipedia.org/wiki/%E5%86%B3%E7%AD%96%E6%A0%91" target="_blank" rel="external">决策树</a>模型来证明下届的正确性.</p>
<p>考虑一棵高度为 $h$, 具有 $l$ 个可达的叶结点的决策树, 它对应一个对 $n$ 个元素所做的比较排序, 因为输入数据的 $n!$ 种可能的排列都是叶结点, 并且叶的数目不多于 ${2}^{n}$, 所以, 我们得到:</p>
<p>$$n! \leq l \leq {2}^{n}$$</p>
<p>对该式两边取对数:</p>
<p>$$\begin{align}<br>    h \geq \lg(n!) = \Omega(n\lg n)<br>   \end{align}$$</p>
<p>所以我们可以观察到堆排序和快速排序都是渐近最优的排序算法, 上届为 $O(n \lg n)$.</p>
<h1 id="计数排序(Counting-Sort)">计数排序(Counting-Sort)</h1><p><strong>计数排序</strong>假设 $n$ 个输入元素中的每一个都是在 $0$ 到 $k$ 区间的一个整数. 当 $k=O(n)$ 时, 排序的运行时间为 $\Theta(n)$.</p>
<p>计数排序的基本思想是, 对于每一个输入元素 $x$, 确定小于 $x$ 的元素个数 $n$, 然后把元素 $x$ 直接放到第 $n+1$ 的位置.</p>
<p>我们使用如下代码实现计数排序.</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> counting_sort(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[], <span class="keyword">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">int</span> C[k+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        C[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">length</span>(A); j++) &#123; C[A[j]]++; &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123; C[i] += C[i-<span class="number">1</span>]; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">length</span>(A) - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        B[C[A[j]]] = A[j];</span><br><span class="line">        C[A[j]]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段代码中, <code>A[]</code> 为输入数组, <code>B[]</code> 为输出数组, <code>C[]</code>提供临时存储空间, 下面我们来分析这段代码.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for <span class="comment">(int i = 0; i &lt;= k; i++)</span> &#123;</span><br><span class="line">    C[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码运行过后, 数组 <code>C[]</code> 中的所有元素都被初始化为 <code>0</code>, $T(n)=\Theta(k)$</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; <span class="built_in">length</span>(A); <span class="built_in">j</span>++) <span class="cell">&#123; C[A[j]]++; &#125;</span></span><br></pre></td></tr></table></figure>
<p>循环的过程中, <code>A[]</code> 数组中的每一个元素都会使 <code>C[]</code> 数组中的对应元素 <code>+1</code>. 循环结束后, <code>C[]</code> 数组中的元素为, 对应索引出现在 <code>A[]</code> 数组中的次数, $T(n)=\Theta(n)$</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for <span class="comment">(int i = 1; i &lt;= k; i++)</span> &#123; C[i] += C[i<span class="number">-1</span>]; &#125;</span><br></pre></td></tr></table></figure>
<p>通过累加, 计算确定对每一个 $i=0, 1, …, k$, 有多少元素是小于或等于 $i$ 的, $T(n)=\Theta(k)$</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="built_in">length</span>(A) - <span class="number">1</span>; <span class="built_in">j</span> &gt;= <span class="number">0</span>; <span class="built_in">j</span>--) <span class="cell">&#123;</span><br><span class="line">    B[C[A[j]]] = A[j];</span><br><span class="line">    C[A[j]]--;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>最后这段代码把 <code>A[]</code> 中的元素, 通过 <code>C[]</code> 中的索引放到恰当的位置,, $T(n)=\Theta(n)$</p>
<p>所以总的时间代价就是 $T(n)=\Theta(n+k)$, 当 $k=O(n)$ 时, 我们一般会使用计数排序, 这样的运行时间为 $\Theta(n)$.</p>
<p>计数排序的另一个重要性质就是它是稳定的, 具有相同值的元素在输出数组中的相对顺序不变, 而这点的主要原因就是</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="built_in">length</span>(A) - <span class="number">1</span>; <span class="built_in">j</span> &gt;= <span class="number">0</span>; <span class="built_in">j</span>--)</span><br></pre></td></tr></table></figure>
<p>如果把这段代码换成</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; <span class="built_in">length</span>(A); <span class="built_in">j</span>++)</span><br></pre></td></tr></table></figure>
<p>那么计数排序就是不稳定的.</p>
<h1 id="基数排序(Radix-Sort)">基数排序(Radix-Sort)</h1><p>我们了解了计数排序之后, 接下来介绍另一种排序方法, <strong>基数排序</strong>.</p>
<p>基数排序是将整数按位数切割成不同的数字, 然后按照每个位数进行比较.</p>
<p><img src="http://deltax.qiniudn.com/radix-sort.png?attname=&e=1427369778&token=YJb_IPQrTSw1ox9LenQDH1HRcgHii9w_bp9ddmcz:d-0v6wSh1j09MH_agrIH_Q0DrN0" style="display:block;margin:auto"></p>
<p>为了保证基数排序的准确性, <strong>一位数排序算法必须是稳定的</strong>.</p>
<p>基数排序的实现如下</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void<span class="function"> radix_sort(</span>int A<span class="keyword">[</span>],<span class="instruction"> int </span>d<span class="function">)</span> &#123;</span><br><span class="line">	for<span class="function"> (</span>int i = 0; i &lt; d; i++<span class="function">)</span> &#123;</span><br><span class="line">		Use a stable sort to sort<span class="instruction"> array </span>A on digit i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用计数排序与基数排序结合, 那么就可以在 $\Theta(d(n+k))$ 时间内排好序.</p>
<h1 id="桶排序(Bucket-Sort)">桶排序(Bucket-Sort)</h1><p><strong>桶排序</strong>假设输入数据服从均匀分布, 平均情况下它的时间代价为 $O(n)$.</p>
<p><img src="http://deltax.qiniudn.com/bucket-sort.png?attname=&e=1427371034&token=YJb_IPQrTSw1ox9LenQDH1HRcgHii9w_bp9ddmcz:D0HE4QlDxJZ455IPQX7uhNNJ_aA" style="display:block;margin:auto"></p>
<p>假设输入数据分布在 $[0..1)$ 区间中, 我们需要一个临时数组 <code>B[0..n-1]</code> 来存放链表. 我们接下来将实现桶排序.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span> A[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = length(A);</span><br><span class="line">    <span class="keyword">int</span> B[n];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        B[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        append(B[<span class="keyword">int</span>(n * A[i])], A[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        insertion_sort(B[i]);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (B[i].head) &#123;</span><br><span class="line">            A[j] = B[i].head;</span><br><span class="line">            <span class="keyword">delete</span>(B[i]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为插入排序的时间代价是 $\Theta(n^2)$, 所以桶排序的时间代价为:</p>
<p>$$T(n) = \Theta(n) + \sum_{i=0}^{n-1}{O({n}_{i}^2)}$$</p>
<p>其中 ${n}_{i}$ 表示桶 <code>B[i]</code> 中元素个数的随机变量.</p>
<p>桶排序可以在线性时间内完成, 只要所有桶的大小平方和与总元素数呈线性关系.</p>
]]></content>
    <summary type="html">
    <![CDATA[我们把在排序的最终结果中, 各元素的次序依赖于它们的比较的排序算法称为比较排序. 而我们在这里介绍的排序将不依赖于元素之间的比较, 即线性时间排序.]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://deltax.me/tags/Algorithm/"/>
    
      <category term="clrs" scheme="http://deltax.me/categories/clrs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Inheritence in Object-Oriented-Programming]]></title>
    <link href="http://deltax.me/2015/03/24/Inheritence-in-Object-Oriented-Programming/"/>
    <id>http://deltax.me/2015/03/24/Inheritence-in-Object-Oriented-Programming/</id>
    <published>2015-03-24T01:07:46.000Z</published>
    <updated>2015-03-24T17:26:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction">Introduction</h2><p>The main addition that <strong>OOP</strong> adds to component-based programming is inheritence. OOP allows defining a class incrementally by extending existing classes.</p>
<p>While using inheritence, it must be taken good care of. It may lost control if your application doesn’t use good design patterns.</p>
<h2 id="Inheritence_Graph">Inheritence Graph</h2><p>Inheritence is a way to construct new classes from existing classes. </p>
<ul>
<li>A method in <code>class C</code> overrrdes any method with the same label in all of <code>C</code>‘s superclass.</li>
<li>A class that inherits from exactly one class is said to use <strong>single inheritence</strong>. Inheritence from more than one class is called <strong>multiple inheritence</strong>.</li>
<li>A class hierarchy with the superclass relation can be seen as a directed graph with the current class being the root.</li>
<li>The inheritence is directed and acyclic, there cannot be any inherit cicle in the inheritence hierachy.</li>
<li>After striking out all overridden methods, each remaing method should have a unique label.</li>
</ul>
<p><img src="http://deltax.qiniudn.com/Class-Hierarchy.png?attname=&e=1427254344&token=YJb_IPQrTSw1ox9LenQDH1HRcgHii9w_bp9ddmcz:YuVSCsLdlEzG3RyHdiJQmj7fE2Y" style="display:block;margin:auto"></p>
<h2 id="Method_Access_Control">Method Access Control</h2><p>When executing inside an object, we often want to call another method in the same object, do a kind of recursive invocation. </p>
<p>We need two ways to do a recursive call. They are called static binding and dynamic binding.</p>
<p>Both of them are needed when using inheritence to override methods.</p>
<h3 id="Dynamic_Binding">Dynamic Binding</h3><p>Dynamic binding allows the new class to correctly extend the old class by letting old methods can new methods. Even the new method did not exist whtn the old method is defined. </p>
<p>This is written as <code>{self M}</code>. This chooses the method matching <code>M</code> that is visible in the current object.</p>
<h3 id="Static_Binding">Static Binding</h3><p>Static binding allows the new methods call the old methods when they have to.</p>
<p>This is written <code>C, M</code> (with a comma), where <code>C</code> is a class that defines a method matching <code>M</code>. This chooses the method matching <code>M</code> tgat us visible in class <code>C</code>.</p>
<h2 id="Encapsulation_Control">Encapsulation Control</h2><p>The principle of controlling encapsulation in an object-oriented language is to limit access to class members (attributes and methods) according to the requirements of the application architecure.</p>
<h3 id="Private_and_Public_Scopes">Private and Public Scopes</h3><p>The two most basic scopes are private and public.</p>
<ul>
<li>A private member is one which is only visible in the object instance. The object instance can see all members defined in its class and its superclasses.</li>
<li>A public member is one which is visible everywhere in the program.</li>
</ul>
<p>These definitions of private and public are natural if classes are used to construct data abstractions.</p>
<ol>
<li>A class is not the same thing as the data abstractions it defines. The class is increment.</li>
<li>Attributes are internal to the data abstraction and should be invisible from the outside. This is exactly the definition of private scope.</li>
<li>Methods are make up the external interface of the data abstraction, so they should be visible to all entities that reference the abstraction. This is exactly the definition of public scope.</li>
</ol>
<h3 id="Private_Methods">Private Methods</h3><p>When a method head is a name value, then its scope limited to all instances of the class, but not to the subclasses or their instances. These method is only visible inside the class definition. </p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C</span><br><span class="line">	meth A(X)</span><br><span class="line">		% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line">	<span class="title">end</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
<p>And with <code>!</code> we can capture the method outside the scope.</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">local</span><br><span class="line">	A=<span class="comment">&#123;NewName&#125;</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	<span class="keyword">class</span> C</span><br><span class="line">		meth !A(X)</span><br><span class="line">			% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line">		<span class="title">end</span></span><br><span class="line">	<span class="title">end</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
<p>This creates a name at class definition time.</p>
<h3 id="Protected_Methods">Protected Methods</h3><p>In <code>C++</code>,  method is protected if it is accessible only in the class it is defined or in descendant classes (and all instances of this classes).</p>
<h2 id="Forwarding_and_Delegation">Forwarding and Delegation</h2><p>Inheritence is one way to reuse functionality when defining new functionality. But it can be tricky to use, because it implies a tight binding between classes. </p>
<p>When developing a application, we want to decomposition different components, always inheritence is not a greate choice for this reason.</p>
<p>Sometimes we use looser approaches. Two such approaches are forwarding and delegation.</p>
<p><img src="http://deltax.qiniudn.com/Delegation-Forwarding.png?attname=&e=1427254344&token=YJb_IPQrTSw1ox9LenQDH1HRcgHii9w_bp9ddmcz:56KTT0g8JxSKHlqaNzvLtqiiXOs" style="display:block;margin:auto"></p>
<h3 id="Forwarding">Forwarding</h3><p>An object can forward any message to another object. In this system, we implement this strategy in <code>otherwise</code> method.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span></span><br><span class="line">	class ForwardMixin</span><br><span class="line">		attr Forward:<span class="constant">none</span></span><br><span class="line">		meth setForward(F) Forward:= F <span class="function"><span class="keyword">end</span></span></span><br><span class="line">		meth otherwise(M)</span><br><span class="line">			<span class="keyword">if</span> @Forward==<span class="constant">none</span> <span class="keyword">then</span> raise undefinedMethod <span class="function"><span class="keyword">end</span></span></span><br><span class="line">			<span class="keyword">else</span> &#123;@Forward M&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">		<span class="function"><span class="keyword">end</span></span></span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="operator">in</span></span><br><span class="line">	fun &#123;NewF Class Init&#125;</span><br><span class="line">		&#123;New class $ <span class="built_in">from</span> Class ForwardMixin <span class="function"><span class="keyword">end</span> <span class="title">Init</span>&#125;</span></span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>Objects created with <code>NewF</code> have a method <code>setForward(F)</code> that lets them set dynamically the object to which the object will forward messages if they do not understand.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class C1</span><br><span class="line">	meth init skip <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	meth cube(A B) B=A*A*A <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br><span class="line"></span><br><span class="line">class C2</span><br><span class="line">	meth init skip <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	meth square(A B) B=A*A <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br><span class="line">Obj1=&#123;NewF C1 init&#125;</span><br><span class="line">Obj2=&#123;NewF C2 init&#125;</span><br><span class="line">&#123;Obj2 setForward(Obj1)&#125;</span><br></pre></td></tr></table></figure>
<p>When <code>{Obj2 cube(10 X)}</code> is called, <code>Obj2</code> forward this message to <code>Obj1</code> and bind the result to <code>X</code>.</p>
<h3 id="Delegation">Delegation</h3><p>Delegation is powerful way to struture a system dynamically. <strong>It lets us build a hierachy among objects instead of among classes</strong>.</p>
<p>Delegation can achieve the same effects as inheritence, with two main differences, but with objects instead of classes, and can be changed at any time.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span></span><br><span class="line">	SetSelf=&#123;NewName&#125;</span><br><span class="line">	class DelegateMixin</span><br><span class="line">		attr this Delegate:<span class="constant">none</span></span><br><span class="line">		meth !SetSelf(S) this:=S <span class="function"><span class="keyword">end</span></span></span><br><span class="line">		meth <span class="built_in">set</span>(A X) A:=X <span class="function"><span class="keyword">end</span></span></span><br><span class="line">		meth <span class="built_in">get</span>(X ?X) X=@A <span class="function"><span class="keyword">end</span></span></span><br><span class="line">		meth setDelegate(D) Delegate:=D End</span><br><span class="line">		meth Del(M S) SS <span class="operator">in</span></span><br><span class="line">			SS:=this this:=S</span><br><span class="line">			<span class="keyword">try</span> &#123;self M&#125; <span class="keyword">finally</span> this:=SS <span class="function"><span class="keyword">end</span></span></span><br><span class="line">		<span class="function"><span class="keyword">end</span></span></span><br><span class="line">		meth call(M) SS <span class="operator">in</span></span><br><span class="line">			SS:=this this:=self</span><br><span class="line">			<span class="keyword">try</span> &#123;self M&#125; <span class="keyword">finally</span> this:=SS <span class="function"><span class="keyword">end</span></span></span><br><span class="line">		<span class="function"><span class="keyword">end</span></span></span><br><span class="line">		meth otherwise(M)</span><br><span class="line">			<span class="keyword">if</span> @Delegate==<span class="constant">none</span> <span class="keyword">then</span></span><br><span class="line">				raise undefinedMethod <span class="function"><span class="keyword">end</span></span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				&#123;@Delegate Del(M @this)&#125;</span><br><span class="line">			<span class="function"><span class="keyword">end</span></span></span><br><span class="line">		<span class="function"><span class="keyword">end</span></span></span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="operator">in</span></span><br><span class="line">	fun &#123;NewD Class Init&#125;</span><br><span class="line">		Obj=&#123;New class $ <span class="built_in">from</span> Class DelegateMixin <span class="function"><span class="keyword">end</span> <span class="title">Init</span>&#125;</span></span><br><span class="line">	<span class="operator">in</span></span><br><span class="line">		&#123;Obj SetSelf(Obj)&#125;</span><br><span class="line">		Obj</span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>If there are two objects <code>Obj1</code> and <code>Obj2</code>, suppose there exists a method <code>setDelegate</code> such that <code>{Obj2 setDelegate(Obj1)}</code> sets <code>Obj2</code> to delegate to <code>Obj1</code>. And <code>Obj1</code> behaves like <code>Obj2</code>‘s superclass.</p>
<p>When we enter the <code>Del</code> method, we should preserve our <code>this</code> value in a temp variable. Because the <code>{Self M}</code> should executes in the <code>Obj1</code> context and change <code>Obj1</code> attributes.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line">   attr <span class="symbol">i:</span><span class="number">0</span></span><br><span class="line">   meth init skip <span class="keyword">end</span></span><br><span class="line">   meth inc(<span class="constant">I</span>)</span><br><span class="line">      &#123;<span class="variable">@this</span> set(i &#123;<span class="variable">@this</span> get(i <span class="variable">$)</span>&#125;+<span class="constant">I</span>)&#125;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   meth browse</span><br><span class="line">      &#123;<span class="variable">@this</span> inc(<span class="number">10</span>)&#125;</span><br><span class="line">      &#123;<span class="constant">Browse</span> c1<span class="comment">#&#123;<span class="yardoctag">@this</span> get(i $)&#125;&#125;</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   meth c &#123;<span class="variable">@this</span> browse&#125; <span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line"><span class="constant">Obj1</span>=&#123;<span class="constant">NewD</span> <span class="constant">C1</span> init&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span></span></span><br><span class="line">   attr <span class="symbol">i:</span><span class="number">0</span></span><br><span class="line">   meth init skip <span class="keyword">end</span></span><br><span class="line">   meth browse</span><br><span class="line">      &#123;<span class="variable">@this</span> inc(<span class="number">100</span>)&#125;</span><br><span class="line">      &#123;<span class="constant">Browse</span> c2<span class="comment">#&#123;<span class="yardoctag">@this</span> get(i $)&#125;&#125;</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="constant">Obj2</span>=&#123;<span class="constant">NewD</span> <span class="constant">C2</span> init&#125;</span><br><span class="line">&#123;<span class="constant">Obj2</span> setDelegate(<span class="constant">Obj1</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>If we execute</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;Obj<span class="number">1</span> <span class="keyword">call</span><span class="comment">(browse)</span>&#125;</span><br><span class="line">&#123;Obj<span class="number">2</span> <span class="keyword">call</span><span class="comment">(browse)</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">%</span> c<span class="number">1</span><span class="title">#10</span> c<span class="number">2</span><span class="title">#100</span></span><br></pre></td></tr></table></figure>
<p>But if we change the <code>Del</code> procedure like this:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth <span class="constant">Del(M S)</span> <span class="keyword">in</span></span><br><span class="line">	&#123;<span class="keyword">self</span> <span class="constant">M&#125;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>The previous execution will browse</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1<span class="hexcolor">#100</span> c2#<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>Because the <code>Obj1</code> does not preserve its attributes, <code>this</code> in <code>{self M}</code> means <code>Obj1</code> instead of <code>Obj2</code>. This make no sense, delegation indeed is design pattern that let other handle the message and deal with own attributes. If we do not save the context in <code>Del</code>, it just like send message to <code>Obj2</code>.</p>
<h2 id="Reflection">Reflection</h2><p>A system is reflection if it can inspect part of its execution while running.</p>
<p>Reflection can be purely introspective or intrusive.</p>
<ul>
<li>Purely Introspective<ul>
<li>Only reading the internal state without modifying it.</li>
</ul>
</li>
<li>Instrutive<ul>
<li>Both reading and modifying the internal state.</li>
</ul>
</li>
</ul>
<h3 id="Meta-Object_Protocols">Meta-Object Protocols</h3><p>The description of how an object system works at a basic level is called meta-object protocol. The ability to change the meta-object protocol is a powerful way to modify an obejct system. It is used for many purposes: debugging, customzing, and separation of concerns.</p>
<h3 id="Methig_Wrapping">Methig Wrapping</h3><p>A common use of meta-object protocol is to do method wrapping. We can write a tracer to track the behavior of an object-oriented program.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fun &#123;<span class="type">TraceNew</span> <span class="type">Class</span> <span class="type">Init</span>&#125;</span><br><span class="line">	<span class="type">Obj</span>=&#123;<span class="type">New</span> <span class="type">Class</span> <span class="type">Init</span>&#125;</span><br><span class="line">	<span class="keyword">proc</span> &#123;<span class="type">TraceObj</span> M&#125;</span><br><span class="line">		&#123;<span class="type">Browse</span> entering(&#123;<span class="type">Label</span> M)&#125;</span><br><span class="line">		&#123;<span class="type">Obj</span> M&#125;</span><br><span class="line">		&#123;<span class="type">Browse</span> exiting(&#123;<span class="type">Label</span> M)&#125;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">in</span> <span class="type">TraceObj</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>If an object is created with this procedure, every method will be traced.</p>
<p>A second way is to implement this with a class instead of a procedure.</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun &#123;TraceNew2 <span class="class"><span class="keyword">Class</span> <span class="title">Init</span>&#125;</span></span><br><span class="line">   Obj=&#123;<span class="keyword">New</span> <span class="class"><span class="keyword">Class</span> <span class="title">Init</span>&#125;</span></span><br><span class="line">   TInit=&#123;NewName&#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Tracer</span></span></span><br><span class="line">      meth !TInit skip <span class="keyword">end</span></span><br><span class="line">      meth otherwise(M)</span><br><span class="line">	 &#123;Browse entering(&#123;Label M&#125;)&#125; &#123;Obj M&#125;</span><br><span class="line">	 &#123;Browse exiting(&#123;Label M&#125;)&#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">in &#123;<span class="keyword">New</span> Tracer TInit&#125; <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>This strategy is used dynamic class creation, the <code>otherwise</code> method and a freshname <code>TInit</code>.</p>
<h3 id="Reflection_of_object_state">Reflection of object state</h3><p>We would like to ba able to read and write the whole state of an object, independant of the object’s class.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Introduction">Introduction</h2><p>The main addition that <strong>OOP</strong> adds to component-based programming is inheritence. OO]]>
    </summary>
    
      <category term="CTMCP" scheme="http://deltax.me/tags/CTMCP/"/>
    
      <category term="Oz" scheme="http://deltax.me/tags/Oz/"/>
    
      <category term="Programming Paradigm" scheme="http://deltax.me/categories/Programming-Paradigm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Class as Data Abstraction in OOP]]></title>
    <link href="http://deltax.me/2015/03/23/Class-as-Data-Abstraction-in-OOP/"/>
    <id>http://deltax.me/2015/03/23/Class-as-Data-Abstraction-in-OOP/</id>
    <published>2015-03-23T02:28:07.000Z</published>
    <updated>2015-03-24T17:17:32.000Z</updated>
    <content type="html"><![CDATA[<p>The heart of the object concept is controlled access to encapsulated data. The behaviour of an object is specified by a <strong>class</strong> which is an incremental definition of a data abstraction.</p>
<ul>
<li>Complete data abstraction<ul>
<li>Defining the various elements that make up a class.</li>
<li>Taking advantage of dynamic typing.</li>
</ul>
</li>
<li>Incremental data abstraction<ul>
<li>Related to inheritance.</li>
</ul>
</li>
</ul>
<h2 id="Defining_Classes_and_Objects">Defining Classes and Objects</h2><p>A class is data structure that defines an object’s internal state (attributes), its behavior (methods), the classes it inherits several properties and operations.</p>
<p>A class is a data abstraction that give its partial and total implementation.</p>
<p>Objects of a given class is called <strong>instances</strong>. These object have differenty identities but can have differnet values for their interval state. And instance is initialized with the operation <code>New</code>.<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Obj=&#123;<span class="keyword">New</span> <span class="class"><span class="keyword">Class</span> <span class="title">Init</span>&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>This code creates an new object <code>Obj</code> of class <code>Class</code> and invokes with the message <code>Init</code>. And after the initialize, we can use the syntax <code>{Obj Message}</code> to call a message on instance <code>Obj</code>.</p>
<h2 id="Class_members">Class members</h2><p>A class defines the constituent parts part each of its object will have. There are three kinds of members in class:</p>
<ul>
<li><strong>Attributes</strong><blockquote>
<p>An attribute is a cell that contains part of the instance’s state which is always called <strong>instance variable</strong> in an instance. And this just visible in the class definition. Every instance have seperate set of attributes.</p>
</blockquote>
</li>
<li><p><strong>Methods</strong></p>
<blockquote>
<p>A method is a kind of procedure that is called in the context of a particular object and that access the object’s attribute. </p>
</blockquote>
<ul>
<li>The method consists of a head and body. </li>
<li>The head consists of a label, which must be an atom or a name, and a set of arguments.</li>
<li>The arguments must be distinct variables.</li>
</ul>
</li>
<li><strong>Properties</strong><blockquote>
<p>A property modifies how an object behaves.</p>
</blockquote>
</li>
</ul>
<h2 id="Initializing_Attributes">Initializing Attributes</h2><p>Attributes can be initialized in two ways: per instance or per class.</p>
<ul>
<li><p>Per instance</p>
<ul>
<li><p>An attribute can be given a different initial value per instance.</p>
  <figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneApt</span></span></span><br><span class="line">	attr streetName</span><br><span class="line">	meth init(X) @streetName=X <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Apt1=&#123;<span class="keyword">New</span> OneApt init(drottninggatan)&#125;</span><br><span class="line">Apt2=&#123;<span class="keyword">New</span> OneApt init(runNeuve)&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Per class</p>
<ul>
<li><p>An attribute can be given a value that is the same for all instances of a class. This is done by initilizing it with “:” in the class definition.</p>
  <figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YorkApt</span></span></span><br><span class="line">	attr</span><br><span class="line">		streetName:york</span><br><span class="line">		streetNumber:<span class="number">100</span></span><br><span class="line">		wallColor:_</span><br><span class="line">		floorSurface:wood</span><br><span class="line">	meth init skip <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Apt3=&#123;<span class="keyword">New</span> OneApt init&#125;</span><br><span class="line">Apt4=&#123;<span class="keyword">New</span> OneApt init&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Per brand</p>
<ul>
<li><p>This is another way to use the per-class initialization. A brand is a set of classes that related in some way.</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">L</span>=linux</span><br><span class="line"><span class="keyword">class</span> RedHat attr ostype:<span class="keyword">L</span> end</span><br><span class="line"><span class="keyword">class</span> SuSE attr ostype:<span class="keyword">L</span> end</span><br><span class="line"><span class="keyword">class</span> Debian attr ostype:<span class="keyword">L</span> end</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="First-class_Messages">First-class Messages</h2><p>Messages are records and method heads are patterns that match a record. We can use different type of records to pass to a method.</p>
<ol>
<li>Static record as message. In this case, message is known at <strong>compile time</strong>.</li>
<li>Dynamic record as message. In this case, message is a variable that references a record that calculated at <strong>run time</strong>.</li>
</ol>
<p>In the method definition, the following approach is possible:</p>
<ol>
<li><p>Fixed argument list</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth <span class="keyword">add</span>(x:X y:Y)</span><br><span class="line">	% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Flexible argument list</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth <span class="keyword">add</span>(x:X y:Y ...)</span><br><span class="line">	% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
<p> The “…” in the method head means that any message is accepted if has least the listed argument.</p>
</li>
<li><p>Variable reference to method head</p>
<p> The whole method head is referenced by a variable.</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth <span class="keyword">add</span>(x:X y:Y ...)=M</span><br><span class="line">	% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>The variable <code>M</code> references the full message as a record.</p>
<ol>
<li><p>Optional argument</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth <span class="keyword">add</span>(x:X y:Y z:Z&lt;=V)</span><br><span class="line">	% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
<p> The <code>&lt;=V</code> in the method head means that field <code>z</code> is optional. You can either called the method with <code>add(x:1 y:2)</code> or <code>add(x:1 y:2 z:3)</code>.</p>
</li>
<li><p>Private method label</p>
<p> Method label can be names. This is denoted by using a variable identifier</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth A(bar:X)</span><br><span class="line">	% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
<p> The method <code>A</code> is bound to a fresh name whtn the class is defined. If this method must be used elsewhere in the program, we should pass it explicitly.</p>
</li>
<li><p>Dynamic method label</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth !A(bar:X)</span><br><span class="line">	% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
<p> The method label has to be known when the class definitions is executed. The variable must be bound to an atom or a name. This technique can make method secure.</p>
</li>
<li><p>The <code>otherwise</code> method</p>
<p> The method head with label <code>otherwise</code> is a catchall that accepts any message for message for which no other method exists.</p>
 <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meth otherwise(M)</span><br><span class="line">	% <span class="function"><span class="keyword">Method</span> <span class="title">body</span></span><br><span class="line"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>A class has only one method with <code>otherwise</code>, if this method exists, it accepts any message.</p>
<h2 id="First-class_Attributes">First-class Attributes</h2><p>Attribute names can be calculated at tun time. It is possible to write methods to access and assign any attributes.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Inspector</span><br><span class="line">	meth <span class="built_in">get</span>(A ?X)</span><br><span class="line">		X=@A</span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line">	meth <span class="built_in">set</span>(A X)</span><br><span class="line">		A:=X</span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>The <code>get</code> method can get any attribute, and the <code>set</code> method can assign any attribute.</p>
<h2 id="Programming_Techniques">Programming Techniques</h2><p>The class concept we have introduced so far gives a convenient syntax for defining data abstractions with excapsulated state and multiple operations.</p>
<ul>
<li>The class statement defines a class value, which can be instantiated to give objects.</li>
<li>Classes can have external references.</li>
<li>Classes are cmpositional, they can be nested within classes.</li>
<li>Classes are compatible with procedure values, they can be nested within procedures and vice versa.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>The heart of the object concept is controlled access to encapsulated data. The behaviour of an object is specified by a <strong>class</st]]>
    </summary>
    
      <category term="CTMCP" scheme="http://deltax.me/tags/CTMCP/"/>
    
      <category term="OOP" scheme="http://deltax.me/tags/OOP/"/>
    
      <category term="Oz" scheme="http://deltax.me/tags/Oz/"/>
    
      <category term="Programming Paradigm" scheme="http://deltax.me/categories/Programming-Paradigm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[快速排序]]></title>
    <link href="http://deltax.me/2015/03/22/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://deltax.me/2015/03/22/快速排序/</id>
    <published>2015-03-22T05:06:38.000Z</published>
    <updated>2015-03-24T17:43:13.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" target="_blank" rel="external">快速排序</a>使用分治法策略把一个数组分成两个子数组, 并对两个子数组递归排序.</p>
<p>快速排序的分治过程有三步:</p>
<ul>
<li>分解<ul>
<li>数组 <code>A[p..r]</code> 被分解为两个可能为空的子数组 <code>A[p..q-1]</code> 和 <code>A[q+1..r]</code>, 使 <code>A[p..q-1]</code> 中的所有元素都小于或等于 <code>A[q]</code>, <code>A[q+1..r]</code> 中的所有元素都大于或等于 <code>A[q]</code>.</li>
</ul>
</li>
<li>解决<ul>
<li>地柜地调用快速排序, 对子数组 <code>A[p..q-1]</code> 和 <code>A[q+1..r]</code> 进行排序.</li>
</ul>
</li>
<li>合并<ul>
<li>不需要合并操作, 数组 <code>A[p..r]</code> 已经有序.</li>
</ul>
</li>
</ul>
<h2 id="快速排序的实现">快速排序的实现</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> q = partition(A, p, r);</span><br><span class="line">		quicksort(A, p, q - <span class="number">1</span>);</span><br><span class="line">		quicksort(A, q + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了排序一个数组, 我们需要调用 `quicksort(A, 0, A.length - 1)</p>
<h2 id="数组的划分(partition)">数组的划分(partition)</h2><p>快速排序最关键的部分就是数组的划分, 也就是过程 <code>partition</code>, 它实现了对数组的重新排序.</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define EXCHANGE(a, b) tmp = a; a = b; b = tmp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> partition(<span class="keyword">int</span> A[], <span class="keyword">int</span> p, <span class="keyword">int</span> r) &#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="keyword">x</span> = A[r],</span><br><span class="line">		 i = p - <span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = p; j &lt; r; j++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (A[j] &lt;= <span class="keyword">x</span>) &#123;</span><br><span class="line">			i++;</span><br><span class="line">			EXCHANGE(A[i], A[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	EXCHANGE(A[r], A[i + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一轮迭代开始时, 对于任意数组下标 <code>k</code>, 有:</p>
<ol>
<li><code>p &lt;= k &lt;= i, A[k] &lt;= x</code></li>
<li><code>i + 1 &lt;= k &lt;= j - 1, A[k] &gt; x</code></li>
<li><code>k = r, A[k] = x</code></li>
</ol>
<h2 id="性能">性能</h2><p>快速排序的性能依赖于数组是否被平衡的划分, 如果平衡, 那么快速排序的划分是<strong>平衡</strong>的. 那么快速排序的性能与归并排序相同, 否则, 划分是<strong>不平衡</strong>的, 快速排序的性能就接近于插入排序.</p>
<h3 id="最坏情况下的性能">最坏情况下的性能</h3><p>当快速排序在最坏情况下时, 我们获得一个递归式:</p>
<blockquote>
<p>T(n) = T(n-1) + Θ(n)</p>
</blockquote>
<p>得到最坏情况下的时间复杂度仍然为 <code>Θ(n^2)</code>, 而插入排序在最坏情况下时间复杂度也为 <code>Θ(n^2)</code>, 而在几乎有序的情况下快速排序的时间复杂度也为 <code>Θ(n^2)</code>, 插入排序则为 <code>Θ(n)</code>.</p>
<h3 id="最好情况下性能">最好情况下性能</h3><p>在最好的情况下, 每次划分都是平均的, 递归式为:</p>
<blockquote>
<p>T(n) = 2T(n/2) + Θ(n)</p>
</blockquote>
<p>最好的情况下的时间复杂度为 <code>Θ(nlgn)</code>, 我们得到了一个渐进时间最快的算法.</p>
<h3 id="平衡的划分">平衡的划分</h3><p>假设划分算法总是产生 9:1 的划分, 那么递归式为:</p>
<blockquote>
<p> T(n) = T(n/10) + T(9n/10) + cn</p>
</blockquote>
<p>我们在这里求得快速排序的总时间代价依然为 <code>Ο(nlgn)</code>, 由此可以发现, 任何一种<strong>常数</strong>比例的划分都会产生时间复杂度为 <code>Ο(nlgn)</code> 的算法.</p>
<h3 id="随机版本的快速排序">随机版本的快速排序</h3><p>因为快速排序的时间复杂度取决于数组的划分, 有时, 我们希望引入随机性来改善算法的性能. 在这里我们可以采用一种随机抽样的方式选择数组的主元, 达到随机的目的.</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randomized_partition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = i = rand() % (r - p) + p;</span><br><span class="line">	EXCHANGE(A[r], A[i])	;</span><br><span class="line">	<span class="function"><span class="keyword">return</span> <span class="title">partition</span><span class="params">(A, p, r)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randomized_quicksort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> q = randomized_partition(A, p, r);</span><br><span class="line">		randomized_quicksort(A, p, q - <span class="number">1</span>);</span><br><span class="line">		randomized_quicksort(A, q + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只需要在调用 <code>partition</code> 之前随机选择一个 pivot 然后与 <code>A[r]</code> 交换即可.</p>
<h3 id="Hoare版本的快速排序">Hoare版本的快速排序</h3><p>我们在之前使用的 <code>partition</code> 并不是快速排序算法最初的版本, 下面给出的是快速排序最初的版本.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hoare_partition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = A[p],</span><br><span class="line">		 i = p - <span class="number">1</span>,</span><br><span class="line">		 j = r + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span> &#123; j--; &#125; <span class="keyword">while</span> (!(A[i] &lt;= x));</span><br><span class="line">		<span class="keyword">do</span> &#123; i++; &#125; <span class="keyword">while</span> (!(A[j] &gt;= x));</span><br><span class="line">		<span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">			EXCHANGE(A[i], A[j]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hoare_quicksort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> q = hoare_partition(A, p, r);</span><br><span class="line">		hoare_quicksort(A, p, q - <span class="number">1</span>);</span><br><span class="line">		hoare_quicksort(A, q + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="针对相同元素的快速排序">针对相同元素的快速排序</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">&#125; pivot_t;</span><br><span class="line"></span><br><span class="line">pivot_t partition(<span class="type">int</span> A[], <span class="type">int</span> p, <span class="type">int</span> r) &#123;</span><br><span class="line">    <span class="type">int</span> x = A[r - <span class="number">1</span>],</span><br><span class="line">        q = p,</span><br><span class="line">        t,</span><br><span class="line">        tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; r - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt; x) &#123;</span><br><span class="line">            <span class="type">EXCHANGE</span>(A[q], A[i]);</span><br><span class="line">            q++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (t = q; t &lt; r &amp;&amp; A[t] == x; t++);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r - <span class="number">1</span>; i &gt;= t; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == x) &#123;</span><br><span class="line">            <span class="type">EXCHANGE</span>(A[t], A[i]);</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pivot_t <span class="literal">result</span> = &#123;q, t&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>partition</code> 过程在这一版本中, 返回 <code>q</code> 和 <code>t</code>, 使得 </p>
<ul>
<li><code>A[p..q-1]</code> 中的每个元素都小于 <code>A[q]</code>.</li>
<li><code>A[q..t]</code> 中的每个元素都等于 <code>A[q]</code>.</li>
<li><code>A[t+1..r]</code> 中的每个元素都大于 <code>A[q]</code>.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" target="_blank" rel="external">快速排序</a>使用分治法策略把一个数组分成两个子数组, 并]]>
    </summary>
    
      <category term="Algorithm" scheme="http://deltax.me/tags/Algorithm/"/>
    
      <category term="clrs" scheme="http://deltax.me/categories/clrs/"/>
    
      <category term="Algorithm" scheme="http://deltax.me/categories/clrs/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stateful Collections]]></title>
    <link href="http://deltax.me/2015/03/20/Stateful-Collections/"/>
    <id>http://deltax.me/2015/03/20/Stateful-Collections/</id>
    <published>2015-03-20T15:51:23.000Z</published>
    <updated>2015-03-24T17:39:45.000Z</updated>
    <content type="html"><![CDATA[<p>There are different kinds of collection depending on what operations are provided. We discuss in two axises about collections.</p>
<ol>
<li>Indexed collections and unindexed collections, depending on whether or not thereis rapid access to individual elements.</li>
<li>Extensible or inextensible collections, depending on whether the number of elements is variable or fixed.</li>
</ol>
<h2 id="Indexed_Collections">Indexed Collections</h2><p>The stateful versions of <strong>tuples</strong> and <strong>records</strong> are <strong>arrays</strong> and <strong>dictionaries</strong>. And now, we have four different kinds of indexed collections.</p>
<p><img src="http://deltax.qiniudn.com/Stateful%20Collections1.png?attname=&amp;e=1426994526&amp;token=YJb_IPQrTSw1ox9LenQDH1HRcgHii9w_bp9ddmcz:UnC-uFe4--jbxOxg76kR83rvZB4" alt="Indexes Collections"></p>
<h3 id="Arrays">Arrays</h3><p>An array is a mapping from integers to partial values. </p>
<ul>
<li>The domain is a set of consecutive integers from lower bound to an upper bound.</li>
<li>The domain is givenwhen the array is declared and cannot be changed afterward.</li>
<li>The range of the mapping can be changed.</li>
<li>Both accessing and changing an array element are done in constant time.</li>
</ul>
<p>There is a strong relationship between tuples and arrays, each of them are mapping from integers to partial values. <strong>But tuples are stateless and arrays are stateful.</strong> And the content of arrays can be changed but tuples can not.</p>
<h3 id="Dictionaries">Dictionaries</h3><p>A dictionary is a mapping from simple constants to partial values. </p>
<ul>
<li>Both the domain and the range of the range of mapping can be changes.</li>
<li>Accessing and changing are done in constant time and adding/removal are done in amortized constant time.</li>
<li>There are no limits to the number of fields in the mapping.</li>
</ul>
<p>There is a close relationship between records and dictionaries. Each of them maps simple contants to partial values. <strong>But records and stateless and dictionaries and stateful.</strong> A records has a fixed set of field but dictionary not.</p>
<h3 id="Choosing_Indexed_Collections">Choosing Indexed Collections</h3><p>The different has different trade-offs in possible operations, memory use, and execution time.</p>
<p>Let us compare the four collections mention above:</p>
<ul>
<li>Tuples<ul>
<li>Most restrictive</li>
<li>Fastest</li>
<li>Require less memory</li>
<li>Stored consecutively</li>
<li>Indexed by number</li>
</ul>
</li>
<li>Records<ul>
<li>More flexible then tuples</li>
<li>Indecies can te literal</li>
<li>Efficient</li>
<li>Stored consecutively</li>
</ul>
</li>
<li>Arrays<ul>
<li>Field can be changed</li>
<li>Bounds can not be changes</li>
<li>Stored consecutively</li>
<li>Efficient</li>
<li>Indexed by number</li>
</ul>
</li>
<li>Dictionaries<ul>
<li>Most general</li>
<li>Indecies can te literal</li>
<li>Created empty</li>
<li>Efficient</li>
<li>More memory and alower access (by a constant factor)</li>
</ul>
</li>
</ul>
<p>We can choose the proper collection type when we use.</p>
<h2 id="Unindexed_Collections">Unindexed Collections</h2><p>Indexed collection are not always the best choice. Sometimes it is better to use unindexed collections, such as lists and streams.</p>
<p>Both of them are declrative data types that collect elements in a linear sqeuence can be traversed from front to back. Any number of traversals can beb done simulataneously on the same list or stream.</p>
<h3 id="Lists">Lists</h3><p>Lists are of finite, fixed length. They are one of the most important data struture in functional programming language. It is really an elegant data struture. And we use <code>map</code> <code>filter</code> <code>fold</code> and many powerful operation to deal with it.</p>
<h3 id="Streams">Streams</h3><p>Streams are also called incomplete lists or partial lists. Their tail are unbound variables. </p>
<ul>
<li>Stream is one of the most efficient extensible collections.</li>
<li>Stream is useful for representing orered sequences of message.</li>
</ul>
<h2 id="Extensible_Collections">Extensible Collections</h2><p>Final, I will introduce some extensible collections, streams, dictionaries and extensible arrays.</p>
<h3 id="Extensible_Arrays">Extensible Arrays</h3><p>As we mentioned above, array is a bounded data structure. How do extensible array work? </p>
<ul>
<li>When the array is full, we create a new array with double size of the older one. And copy all the elements from old one to new one. </li>
<li>When the array is quarter full, we create a new array with half size of the older one. And copy the elements.</li>
</ul>
<p>This data structure take constant time to the cost of resize operation. The most important thing is to ensure that the index must always remain in bound.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There are different kinds of collection depending on what operations are provided. We discuss in two axises about collections.</p>
<ol>
<]]>
    </summary>
    
      <category term="CTMCP" scheme="http://deltax.me/tags/CTMCP/"/>
    
      <category term="Functional Programming" scheme="http://deltax.me/tags/Functional-Programming/"/>
    
      <category term="Programming Paradigm" scheme="http://deltax.me/categories/Programming-Paradigm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Incredible Functional Programming]]></title>
    <link href="http://deltax.me/2015/03/20/Incredible%20Functional%20Programming/"/>
    <id>http://deltax.me/2015/03/20/Incredible Functional Programming/</id>
    <published>2015-03-19T16:40:16.000Z</published>
    <updated>2015-03-24T17:24:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Experience">Experience</h2><p>这一次我为大家分享的主题是, <code>Incredible Functional Programming</code>. 分享的主要的内容是<strong>函数式编程</strong>的一些非常基础的东西, 这与我们平时所使用的<strong>面向对象编程</strong>这种编程范式有着极大的不同. 也希望能给今天的各位带来一些收获或者启发, 而我也能为 <code>Function Programming</code> 的传播与壮大做出自己的一份贡献.</p>
<h3 id="Encounter_Functinol_Programming">Encounter Functinol Programming</h3><p>首先呢, 我想说一下我是如何接触到函数式编程这一编程范式的, 在大一下学期的时候, 有几位 Thoughtworks 的工程师, 来为我们讲解如何使用 Rails 建站. 我个人对这几位工程师也是非常的尊敬的, 在一次偶然的交流中, 他多次提出 Functional Programming 这一编程范式, 当时我对它的第一感觉是很好奇, 而且哪位工程师说过一句话, 我只能记住大概的意思:</p>
<blockquote>
<p>OOP 现在也被很多人批评, 未来一定是 FP 的天下.</p>
</blockquote>
<p>这对于当时只用 Ojective-C 的我来说是不可想象的, 也极大地激起了我的兴趣, 不过, 这件事情虽然没有让我直接转投 FP 的怀抱但是, 我也对 FP 有了很深的印象, 我想: 我就是那时被传教的吧, 也让我之后陷入了这个大坑中.</p>
<p>在之后的学习中, 我学习了<br><a href="http://www.amazon.cn/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6-%E7%A1%85%E8%B0%B7%E5%88%9B%E4%B8%9A%E4%B9%8B%E7%88%B6Paul-Graham%E6%96%87%E9%9B%86-Paul-Graham/dp/B004WHZGZQ/ref=sr_1_4?ie=UTF8&amp;qid=1426784128&amp;sr=8-4&amp;keywords=%E9%BB%91%E5%AE%A2" target="_blank" rel="external">黑客与画家</a><br>这本书, 书中提到了对 <a href="http://zh.wikipedia.org/wiki/LISP" target="_blank" rel="external">Lisp</a> (Lisp 是第一个函数式编程语言, 其名称源自列表处理器（英语：List Processor）的缩写) 的推崇, 以及他们使用 Lisp 进行开发的效率是当时其他公司的几十倍, 这对于当时使用 OOP 的我是一种巨大的震撼.</p>
<p>EXTREMLY INCREDIBLE!</p>
<h3 id="Learn_Functional_Programming">Learn Functional Programming</h3><p>随着我对 Lisp 的了解, 我也开始学习 Lisp 的方言, 也就是 Scheme. 当时看的书呢, 也是倍受推崇的 SICP(计算机程序的构造和解释), 这也是到目前为止对我影响最大的书, 第一次颠覆了我对编程这项活动的认识, 而我也感觉到了 Lisp 的神奇, 而我们 Programmer 实际上就是魔术师. 我们使用代码当做我们的咒语, 控制着计算机做出各种神奇的事情. </p>
<p>而在学习 Lisp 之后, 我有参加了 Coursera 中的一门公开课, Programming Language, 在这门课中, 我学习了 <a href="http://zh.wikipedia.org/wiki/ML%E8%AF%AD%E8%A8%80" target="_blank" rel="external">Standerd ML</a>, 而且学习了各种各样的编程范式和编程语言 Ruby SML Racket, 以及它们的区别和联系, 而且写了人生中第二个解释器. 这门课也是我在 Coursera 唯一一门从头追到尾并且完成的课程. 感觉跟下来收获还是非常大的.</p>
<p>之后在几个月前, 我又开始学习了 <a href="http://zh.wikipedia.org/wiki/Haskell" target="_blank" rel="external">Haskell</a>, 了解了 Haskell 这门语言的抽象能力是多么的强大, 多么的难学, 概念多么的难以理解, 不过我还是选择学习 Haskell 这门编程语言, 而我学习的最大理由就是他太好玩了, 在 Learn you a Haskell for Great Good 这本书中的前言写到:</p>
<blockquote>
<p>Haskell 很有趣, 这就够了.</p>
</blockquote>
<p>然后就是在 <a href="https://www.hackerrank.com/domains/fp" target="_blank" rel="external">HackerRank</a> 上隔三差五刷两道题解解闷, 顺便陶冶一下情操. 后来我有接触到了 <a href="http://zh.wikipedia.org/wiki/Scala" target="_blank" rel="external">Scala</a>, 不过看着那个丑陋的 IDE 和字体我果断放弃了. 目前就是闲来无事刷刷题, 看看博客, 读读论文. 这基本上就是我到目前为止学习函数式编程的全部经历了.</p>
<hr>
<h2 id="Why_Functional_Programming">Why Functional Programming</h2><p>函数式编程有哪些好处, 我们为什么要学习函数式编程呢.</p>
<ul>
<li>首先, 它很有趣, 这也是我学习函数式编程的原因</li>
<li>其次, 函数在函数式编程中作为一等公民, 提供了强大的抽象能力.  <code>map</code> <code>fold</code> <code>filter</code> 等等操作处理数据非常的优雅. 传统的编程语言都在想方设法集成这些特性.</li>
<li>由于函数式编程中的数据不可改变, 线程竞争在函数式编程是不可能的事情, 这也就能够大大地提高并发编程的处理速度. </li>
<li>同时, 在纯函数式编程语言中, 函数没有任何副作用. 因为函数的返回结果只与输入结果有关, 所以它的稳定性是面向对象编程所不能比的. 因为所有的函数, 都不会依赖于外部的状态, 只取决于输入的参数.</li>
</ul>
<p>随着人们对函数式编程的认识越来越高, 许多公司也开始重视函数式编程在高并发以及稳定性方面的强大能力. </p>
<hr>
<h2 id="Introduction">Introduction</h2><p>接下来, 我介绍一下函数式编程的一些特点和如何学习(入)习(坑), 入坑前请深思熟虑, 我是否能为一个我很少用到的东西投入大量的时间, 换来一些对于个人可以接受的结果.</p>
<p>而对于使用哪一种语言来对函数式编程进行介绍, 我选择了非常简单的 <a href="http://zh.wikipedia.org/wiki/Scheme" target="_blank" rel="external">Scheme</a> 来为各位演示函数式编程, 与我们平时使用的命令式编程有什么区别.</p>
<h3 id="Lambda_Calculus">Lambda Calculus</h3><p>我们在讨论 Scheme 之前, 首先要了解什么是 <a href="http://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97" target="_blank" rel="external">lambda演算</a></p>
<blockquote>
<p>λ演算（英语: lambda calculus，λ-calculus）是一套用于研究函数定义、函数应用和递归的形式系统. Lambda 演算可以被称为最小的通用程序设计语言. 它包括一条变换规则（变量替换）和一条函数定义方式, Lambda 演算之通用在于, 任何一个可计算函数都能用这种形式来表达和求值. 因而, 它是等价于图灵机的. 尽管如此, Lambda演算强调的是变换规则的运用,  而非实现它们的具体机器. 可以认为这是一种更接近软件而非硬件的方式.</p>
</blockquote>
<p>我们在接下来的讨论中会提高 lambda 在 Scheme 中如何使用, 所以在这里就先不再多说了.</p>
<h3 id="Church_Number">Church Number</h3><p><a href="http://zh.wikipedia.org/wiki/%E9%82%B1%E5%A5%87%E6%95%B0" target="_blank" rel="external">邱奇数</a> 是把数据和运算符嵌入到 lambda 演算内的一种方式, 它是使用 lambda 符号的自然数表示法.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> zero <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> x)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> one <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> two <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">plus</span> n m)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="list">(<span class="keyword">m</span> f)</span> <span class="list">(<span class="list">(<span class="keyword">n</span> f)</span> x)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> true <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">y</span>)</span> x)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> false <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">y</span>)</span> y)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>我在这里只为各位简单的展示一下如何使用 lambda 来表示一些数据类型.</p>
<h3 id="Intrduction_to_Scheme">Intrduction to Scheme</h3><p>Scheme 是一种函数式语言, 是 Lisp 的两种主要的方言之一, 它的设计极其的简单, 一个小型语言核心作为标准, 加上各种强力的语法糖扩展语言本身. Scheme的哲学是: 设计计算机语言不应该进行功能的堆砌, 而应该尽可能减少弱点和限制, 使剩下的功能显得必要. Scheme 是第一个使用静态作用域的 Lisp 方言, 也是第一个引入”干净宏”和第一类续延的编程语言.</p>
<h4 id="Warm_Up">Warm Up</h4><p>我现在介绍一下在 Scheme 中最简单的一些表达式</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(+ <span class="number">2</span> <span class="number">5</span>) =&gt; <span class="number">7</span></span><br><span class="line">(* <span class="number">3</span> <span class="number">5</span> (+ <span class="number">2</span> <span class="number">4</span>)) =&gt; <span class="number">90</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到, 在 Scheme 中所有的表达式都是被采用前序(prefix)表示法, 并且<strong>括号</strong>以及空白作为分隔符.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(define a 1)</span></span><br><span class="line"><span class="comment">(define b 2)</span></span><br><span class="line"><span class="comment">(define (double x)</span> <span class="comment">(+ x x)</span>)</span><br><span class="line"><span class="comment">(if (= (double a)</span> <span class="number">2</span>)</span><br><span class="line">	<span class="comment">((lambda (x)</span> <span class="comment">(+ x b)</span>) <span class="number">2</span>)</span><br><span class="line">	<span class="number">0</span>)</span><br><span class="line">	</span><br><span class="line">=&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>define</code> 不仅可以定义一个变量 <code>(define  a 1)</code>, 也可以定义一个函数 <code>(define (double x) (+ x x))</code>.<ul>
<li><code>(define &lt;identifier&gt; &lt;expression&gt;)</code></li>
</ul>
</li>
<li><code>if</code> 语句的语法如下<ul>
<li><code>(if &lt;predicate-clause&gt; &lt;true-clause&gt; &lt;false-clause&gt;)</code></li>
</ul>
</li>
<li><code>lambda</code> 其实可以看作一个匿名函数, 在这里它接收一个参数 <code>x</code> 返回一个单参数的函数, 然后把 <code>2</code> 作为这个函数的参数返回 <code>(+ 2 b) =&gt; 4</code>.<ul>
<li><code>(lambda (parameters) expression)</code></li>
</ul>
</li>
</ul>
<p>而到目前为止, 我们已经掌握了这次分享与 Scheme 有关的全部语法了.</p>
<h4 id="Newton’s_Method">Newton’s Method</h4><p>不论你学习哪一种函数式编程语言, <strong>牛顿法</strong> (Newton’s method)求平方跟都是一个你基本扰不过的问题, 因为我在很多函数式编程语言的书或者课程中, 都发现了他的身影, 包括 Scala Haskell Scheme …</p>
<p>牛顿法怎么求某个 <code>x</code> 的平方根呢.</p>
<ol>
<li>做出一个猜测 <code>guess</code>.</li>
<li>求出 <code>guess</code> 的平方, 然后与 <code>x</code> 比较, 如果差值在可以容忍的范围之内, 那么 <code>guess</code> 就是我们要求的近似的平方根, 如果不满足, 则继续步骤 3.</li>
<li>求出 <code>x/guess</code> 的值, 并与 <code>guess</code> 求平均数, 提高 <code>guess</code> 的准确性, 返回步骤 2.</li>
</ol>
<p>代码如下:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">square</span> guess)</span> x)</span>)</span> tolerance)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword">average</span> guess <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x guess)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sqrt-iter</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess)</span></span><br><span class="line">        guess</span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> guess)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.001</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">sqrt-iter</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>这段代码使用了非常神奇的方式, 迭代地解决了如何使求平方根的问题, 我觉得在此处用作例子也再好不过, 我们整理一下这段代码, 让你们感觉到函数式编程的神奇和它带给我们的强大的表达能力.</p>
<h3 id="Introduction_to_Haskell">Introduction to Haskell</h3><p>接下来我们将使用 Haskell 继续对函数式编程进行介绍. 我们接下来将介绍一下几个概念:</p>
<ul>
<li>列表(和列表推导式)</li>
<li>模式匹配</li>
<li>柯里化</li>
</ul>
<p>这三个重要的概念都是在函数编程中极其常用的, 如果你选择了函数式编程, 那么几乎每时每刻都在与这三者打交道.</p>
<h4 id="Warm_Up-1">Warm Up</h4><p>我们先来写几个非常简单的 Haskell 函数来热一热身, 我们先把之前 使用 Scheme 求平方根的代码, 转换为 Haskell 编译器能够理解的 Haskell 代码.</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sqrt :: (Ord s, Floating s) =&gt; s -&gt; s</span><br><span class="line">sqrt <span class="variable">x =</span> sqrtIter <span class="number">1.0</span></span><br><span class="line">  where <span class="variable">tolerance =</span> <span class="number">0.0001</span></span><br><span class="line">        goodEnough <span class="variable">guess =</span> abs ((guess ** <span class="number">2</span>) - x) &lt; tolerance</span><br><span class="line">        improve <span class="variable">guess =</span> (guess + x / guess) / <span class="number">2</span></span><br><span class="line">        sqrtIter <span class="variable">guess =</span> <span class="keyword">if</span> goodEnough guess</span><br><span class="line">                         <span class="keyword">then</span> guess</span><br><span class="line">                         <span class="keyword">else</span> sqrtIter $ improve guess</span><br></pre></td></tr></table></figure>
<p>在 Haskell 中为函数加上类型声明是非常好的习惯, 这里的类型声明暂时不需要大家理解.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> :: <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span></span><br><span class="line"><span class="keyword">double</span> x = x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">square :: <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span></span><br><span class="line">square x = x * x</span><br></pre></td></tr></table></figure>
<p>这里我们可以看到两个函数的类型声明都是 <code>Int -&gt; Int</code> 就是接收一个 <code>Int</code> 类型的值, 返回一个 <code>Int</code> 类型的值.</p>
<h4 id="List_and_List_Comprehension">List and List Comprehension</h4><p>在Haskell中, List 非常的重要. 它是最常用的数据结构，并且十分强大，灵活地使用它可以解决很多问题. 它是一种单类型的数据结构, 可以用来存储多个类型相同的元素. 我们可以在里面装一组数字或者一组字符, 但不能把字符和数字装在一起, 而且 List 是可以嵌套的.</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; let numbers = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">ghci&gt; numbers</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">ghci&gt; let nestedNumbers = <span class="string">[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]</span>   </span><br><span class="line">ghci&gt; nestedNumbers</span><br><span class="line"><span class="string">[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]</span>   </span><br><span class="line"></span><br><span class="line">ghci&gt; <span class="number">3</span>:[head numbers] ++ [head $ tail numbers]</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>我们使用 head tail ++ : 几种对列表进行简单的处理.<ul>
<li>head 取出列表中第一个元素</li>
<li>tail 取出列表去掉第一个元素后剩下的列表</li>
<li>++ 连接两个列表</li>
<li>: 在列表前添加一个元素</li>
</ul>
</li>
</ul>
<p>至于一些其他的方法, 在这里也不做过多的介绍, 比如说 <code>length</code> <code>reverse</code> <code>take</code> … 他们都是非常重要的操作.</p>
<p>如果你现在还记得对集合的 Comprehension 那么, 你对 Haskell 的 List Comprehension 理解也会十分的轻松.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>]]   </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], x*<span class="number">2</span> &gt;= <span class="number">12</span>]   </span><br><span class="line">[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>] </span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; [ x | x &lt;- [<span class="number">50.</span><span class="number">.100</span>], x `mod` <span class="number">7</span> == <span class="number">3</span>]   </span><br><span class="line">[<span class="number">52</span>,<span class="number">59</span>,<span class="number">66</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">87</span>,<span class="number">94</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; [ x*y | x &lt;- [<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>], y &lt;- [<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>]]   </span><br><span class="line">[<span class="number">16</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">110</span>]</span><br></pre></td></tr></table></figure>
<p>这里也没啥好说的, 太简单了.</p>
<p>我们使用列表推倒来实现 quicksort.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">quicksort :: [Int] -&gt; [Int]</span><br><span class="line">quicksort [] = []</span><br><span class="line">quicksort (x:xs) = quicksort <span class="keyword">ls</span> ++ [x] ++ quicksort <span class="keyword">bs</span></span><br><span class="line">  where <span class="keyword">ls</span> = [<span class="keyword">l</span> | <span class="keyword">l</span> &lt;- xs, <span class="keyword">l</span> &lt;= x]</span><br><span class="line">        <span class="keyword">bs</span> = [b | b &lt;- xs, b &gt; x]</span><br></pre></td></tr></table></figure>
<h4 id="Pattern_Matching">Pattern Matching</h4><p>模式匹配通过检查数据的特定结构来检查其是否匹配, 并按模式从中取得数据. 举一个例子大家就能非常轻松地理解模式匹配.</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">factorial ::</span> (Integral <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span>   </span><br><span class="line">factorial <span class="number">0</span> = <span class="number">1</span>   </span><br><span class="line">factorial n = n * factorial (n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><code>factorial</code> 是一个递归的函数, <code>factorial</code> 接收一个参数, 当这个参数为 0 的时候, 会匹配到第一种情况直接返回 1, 否则就会匹配到第二种情况, 递归地求解 <code>factorial</code>, 直到参数为 0, 返回结果.</p>
<p>这个函数可以等价为</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">factorial ::</span> (Integral <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span></span><br><span class="line">factorial n = <span class="keyword">if</span> n == <span class="number">0</span> then <span class="number">1</span> <span class="keyword">else</span> n * factorial (n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>不过使用模式匹配的写法对于使用函数式编程的人来说更加具有可读性, 而经过长时间的使用, 相信各位一定会习惯模式匹配的写法.</p>
<p>有很多命令式语言都提供 <code>case</code> 表达式, 就是取一个变量, 按照对变量的判断选择对应的代码块, 而模式匹配实际上就是 <code>case</code> 表达式的语法糖.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> expression <span class="keyword">of</span> pattern -&gt; <span class="literal">result</span>   </span><br><span class="line">                   pattern -&gt; <span class="literal">result</span>   </span><br><span class="line">                   pattern -&gt; <span class="literal">result</span></span><br></pre></td></tr></table></figure>
<p>我们将阶乘函数转化为 <code>case</code> 形式:</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factorial :: (<span class="type">Integral</span> a) =&gt; a -&gt; a   </span><br><span class="line">factorial n = <span class="keyword">case</span> n <span class="keyword">of</span> <span class="number">0</span> -&gt; <span class="number">1</span></span><br><span class="line">								 n -&gt; n * factorial (n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>好了, 我们已经对模式匹配有了了解, 接下来我们该介绍函数式编程下一个非常有趣的话题.</p>
<h4 id="Currying">Currying</h4><p><a href="http://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96" target="_blank" rel="external">柯里化</a> 是把接收多个参数的函数变换成接收一个单一参数的函数.</p>
<p>比如我们定义一个函数 <code>add</code>:</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add</span> :: <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span></span><br></pre></td></tr></table></figure>
<p>在之前的理解中, <code>add</code> 是一个接收两个 <code>Int</code> 类型参数的并返回一个 <code>Int</code> 的函数.</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add</span> <span class="built_in">x</span> <span class="built_in">y</span> = <span class="built_in">x</span> + <span class="built_in">y</span></span><br></pre></td></tr></table></figure>
<p>我们直接将两个参数传入这个函数 <code>add 3 4</code> 就会返回 <code>5</code>.</p>
<p>但是, 现在我们能不能只给他传一个参数呢, 我么来尝试一下:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt;<span class="instruction"> add </span>3</span><br><span class="line">	</span><br><span class="line">&lt;interactive&gt;:9:1:</span><br><span class="line">    No<span class="instruction"> instance </span>for<span class="function"> (</span>Show<span class="function"> (</span>a0 -&gt; a0<span class="function">)</span><span class="function">)</span> arising from a use of ‘print’</span><br><span class="line">    In a stmt of an interactive GHCi command: print it</span><br></pre></td></tr></table></figure>
<p>我们直接在 ghci 中输入 <code>add 3</code> 然后, 编译器报错了, 错误的内容是不能正确的显示这个结果, 说明编译器不理解如何 <code>print</code> 这个结果, 我们换一种方式查看一下类型:</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; :t <span class="keyword">add</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">add</span> <span class="number">3</span> :: <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span></span><br></pre></td></tr></table></figure>
<p>发现这个 <code>add 3</code> 的类型竟然是 <code>Int -&gt; Int</code> 这说明, <code>add</code> 函数接受了一个 <code>Int</code> 返回了一个 <code>Int -&gt; Int</code> 的函数.</p>
<p>我们接下来为这个函数起一个名字</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; let addThree = <span class="keyword">add</span> <span class="number">3</span></span><br><span class="line">ghci&gt; :t <span class="keyword">add</span></span><br><span class="line"><span class="keyword">add</span>       addThree</span><br><span class="line">ghci&gt; :t addThree</span><br><span class="line">addThree :: <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span></span><br></pre></td></tr></table></figure>
<p>然后尝试调用这个函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; addThree 4</span><br><span class="line">7</span><br></pre></td></tr></table></figure>
<p>发现这个函数的返回值竟然也是 <code>7</code> 这是为什么呢?</p>
<p>因为在函数式语言的实现中, 函数的定义会被转换为如下的形式:</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add :: Int<span class="function"> -&gt;</span> Int<span class="function"> -&gt;</span> Int</span><br><span class="line">add = <span class="string">\x</span> <span class="function">-&gt;</span> (<span class="string">\y</span> <span class="function">-&gt;</span> x + y)</span><br></pre></td></tr></table></figure>
<p>它可以每次只接受一个参数, 然后返回一个函数或者值. 这就是函数为什么可以柯里化的原因.</p>
<p>柯里化又可以做些什么呢, 我们在介绍一个非常重要的函数 <code>map</code>, <code>map</code> 翻译过来就是映射, 他把一个函数映射到一个列表中, 我们简单的举个例子.</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ghci</span>&gt; map (\x -&gt; x * x)<span class="sqbracket"> [1,2,3,4,5]</span><span class="sqbracket"></span><br><span class="line">[1,4,9,16,25]</span></span><br></pre></td></tr></table></figure>
<p>它把一个匿名函数依次映射到列表 <code>[1,2,3,4,5]</code> 中, 最后将这些结果连接成一个列表.</p>
<p><code>map</code> 为我们提供了一个高阶的抽象, 它以一个函数和列表作为参数, 返回一个列表.</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map :: <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> [a]<span class="function"> -&gt;</span> [b]</span><br></pre></td></tr></table></figure>
<p>我们接下来就可以使用 <code>map</code> 和柯里化构建大量的函数, 减少我们的工作量</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">square :: <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span></span><br><span class="line">square = \x -&gt; x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> :: <span class="keyword">Int</span> -&gt; <span class="keyword">Int</span></span><br><span class="line"><span class="keyword">double</span> = (+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">squareList :: [<span class="keyword">Int</span>] -&gt; [<span class="keyword">Int</span>]</span><br><span class="line">squareList = map square</span><br><span class="line"></span><br><span class="line">doubleList :: [<span class="keyword">Int</span>] -&gt; [<span class="keyword">Int</span>]</span><br><span class="line">doubleList = map <span class="keyword">double</span></span><br></pre></td></tr></table></figure>
<p>而接下来我们就可以直接使用 <code>squareList</code> 和 <code>doubleList</code> 完成对列表的操作.</p>
<hr>
<h2 id="Application">Application</h2><p>目前应用到生产环境还是比较少, 不过已经有一些公司, 使用 scala, Erlang 等等语言做一些后端方面的开发. 我对这些语言的了解还是比较少的.</p>
<p>Lisp 也被用来开发 Emacs 和一些人工智能的领域, 具体戳这里<a href="http://en.wikipedia.org/wiki/Common_Lisp#Applications" target="_blank" rel="external">http://en.wikipedia.org/wiki/Common_Lisp#Applications</a>.</p>
<p>当你理解了函数式编程的一些思想, 你会发现原来以前所学过的很多东西都是函数式编程的缩影, 而对于 iOS 开发, 目前是十分流行的框架 <code>ReactiveCocoa</code> 就是由函数式编程的思想开发的.</p>
<hr>
<h2 id="Final">Final</h2><p>最后的最后, 我为大家推荐一些函数式编程的学习资料.</p>
<p>Scheme:</p>
<ul>
<li><a href="http://www.amazon.cn/The-Little-Schemer-Friedman-Daniel-P/dp/0262560992/ref=sr_1_1?ie=UTF8&amp;qid=1426822097&amp;sr=8-1&amp;keywords=the+little+schemer" target="_blank" rel="external">The Litter Schemer</a></li>
<li><a href="http://www.amazon.cn/Structure-and-Interpretation-of-Computer-Programs-Abelson-Harold/dp/0262510871/ref=sr_1_2?ie=UTF8&amp;qid=1426822081&amp;sr=8-2&amp;keywords=Structure+and+Interpretation+of+Computer+Program" target="_blank" rel="external">Structure and Interpretation of Computer Program</a></li>
<li><a href="http://mitpress.mit.edu/sicp/" target="_blank" rel="external">http://mitpress.mit.edu/sicp/</a></li>
</ul>
<p>Haskell:</p>
<ul>
<li><a href="http://learnyouahaskell.com/" target="_blank" rel="external">Learn you a haskell for great good</a></li>
<li><a href="http://book.realworldhaskell.org/read/" target="_blank" rel="external">Real World Haskell</a></li>
</ul>
<p>终于结束了…真累.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Experience">Experience</h2><p>这一次我为大家分享的主题是, <code>Incredible Functional Programming</code>. 分享的主要的内容是<strong>函数式编程</strong>的一些非常基础的]]>
    </summary>
    
      <category term="Functional Programming" scheme="http://deltax.me/tags/Functional-Programming/"/>
    
      <category term="Scheme" scheme="http://deltax.me/tags/Scheme/"/>
    
      <category term="Programming Paradigm" scheme="http://deltax.me/categories/Programming-Paradigm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[堆排序]]></title>
    <link href="http://deltax.me/2015/03/19/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://deltax.me/2015/03/19/堆排序/</id>
    <published>2015-03-19T07:06:47.000Z</published>
    <updated>2015-03-24T17:42:08.000Z</updated>
    <content type="html"><![CDATA[<p>一种时间复杂度为 <code>Ο(nlgn)</code> 的排序算法.</p>
<h2 id="堆">堆</h2><p><code>二叉堆</code> 是一个数组, 它可以被看成一个近似的完全二叉树, 除了最底层外, 该树是完全充满的, 而且是从左向右填充.</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> i / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span> * i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二叉堆分两种形式: 最大堆和最小堆. 在这两种堆中, 结点的值都要满足堆的性质.</p>
<ul>
<li>在最大堆中 <code>(max-heap)</code> 中, 除了根以外的所有节点 <code>i</code> 都满足:<ul>
<li><code>A[PARENT.(i)] ≧ A[i]</code></li>
</ul>
</li>
<li>在最小堆 <code>(min-heap)</code> 中, 除了根以外的所有节点 <code>i</code> 都满足:<ul>
<li><code>A[PARENT.(i)] ≦ A[i]</code></li>
</ul>
</li>
</ul>
<p>一般情况下, 我们在堆排序算法中使用<strong>最大堆</strong>, 在构造优先队列中使用<strong>最小堆</strong></p>
<hr>
<h2 id="维护堆的性质">维护堆的性质</h2><p><code>max_heapify</code> 是用于维护最大堆性质的重要过程.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void max_heapify(heap_t *heap, <span class="built_in">int</span> i) &#123;</span><br><span class="line">	<span class="built_in">int</span> largest;</span><br><span class="line">	<span class="built_in">int</span> l = left(i);</span><br><span class="line">	<span class="built_in">int</span> r = right(i);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (l &lt;= <span class="type">A</span>-&gt;heap_size &amp;&amp; heap-&gt;elements[l] &gt; heap-&gt;elements[i]) &#123;</span><br><span class="line">		largest = l;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		largest = i;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (r &lt;= <span class="type">A</span>-&gt;heap_size &amp;&amp; heap-&gt;elements[r] &gt; heap-&gt;elements[i]) &#123;</span><br><span class="line">		largest = r;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">		<span class="built_in">int</span> temp = heap-&gt;elements[largest];</span><br><span class="line">		heap-&gt;elements[i] = heap-&gt;elements[largest];</span><br><span class="line">		heap-&gt;elements[largest] = temp</span><br><span class="line">		max_heapify(heap, largest);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于一棵以 <code>i</code> 为根节点, 大小为 <code>n</code> 的子树, <code>max_heapify</code> 的时间代价的递归式为:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">T</span><span class="params">(n)</span></span> ≦ <span class="function"><span class="title">T</span><span class="params">(<span class="number">2</span>n/<span class="number">3</span>)</span></span> + Θ(<span class="number">1</span>) =&gt; <span class="function"><span class="title">T</span><span class="params">(n)</span></span> = Ο(lgn)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="建堆">建堆</h2><p>我们可以使用自底向上的方法利用过程 <code>max_heapify</code> 把一个大小为 <code>n = A.length</code> 的数组 <code>A[1..n]</code> 转换为最大堆.</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> build_max_heap(heap_t *heap) &#123;</span><br><span class="line">	heap-&gt;heap_size = heap-&gt;<span class="built_in">length</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = heap-&gt;<span class="built_in">length</span> / <span class="number">2</span>; i &lt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">		max_heapify(heap, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>build_max_heap</code> 的时间复杂度为 <code>Ο(n)</code>.</p>
<hr>
<h2 id="堆排序算法">堆排序算法</h2><p>堆排序算法使用 <code>build_max_heap</code> 将输入的数组 <code>A[0..n-1]</code> 建成最大堆. 数组中的最大元素总在根节点 <code>A[0]</code>, 通过把它与 <code>A[n-1]</code> 进行交换, 我们可以把元素放到正确的位置. 而我们只需要不断的调用 <code>max_heapify</code> 来维护堆的性质——<strong>A[0]为最大元素</strong>, 并把子数组中的最大元素移到合适的位置.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void heapsort(heap_t *heap) &#123;</span><br><span class="line">	build_max_heap(heap);</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> i = heap-&gt;length - <span class="number">1</span>; i &gt;= <span class="number">2</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">int</span> temp = heap-&gt;elements[<span class="number">0</span>];</span><br><span class="line">		heap-&gt;elements[<span class="number">0</span>] = heap-&gt;elements[i];</span><br><span class="line">		heap-&gt;elements[i] = temp;</span><br><span class="line">		heap-&gt;heap_size--;</span><br><span class="line">		max_heapify(heap, <span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>heapsort</code> 过程的时间复杂度是 <code>Ο(nlgn)</code> </p>
<hr>
<h2 id="优先队列">优先队列</h2><p><code>优先队列</code> (priority queue)是一种用来维护由一组最大元素构成的集合 S 的数据结构, 其中的每个元素都有一个相关的值, 成为<strong>关键字</strong>. 一个最大优先队列支持以下的操作:</p>
<ul>
<li><code>INSERT(S, x)</code>: 把元素 <code>x</code> 插入集合 <code>S</code> 中, 这一操作等价于 <code>S=S U {x}</code></li>
<li><code>MAXIMUM(S)</code>: 返回 <code>S</code> 中具有最大键字的元素.</li>
<li><code>EXTRACT-MAX(S)</code>: 去掉并返回 <code>S</code> 中的具有最大键字的元素.</li>
<li><code>INCREASE-KEY(S, x, k)</code>: 将元素 <code>x</code> 的关键字值增加到 <code>k</code>, 这里假设 <code>k</code> 的值不小于 <code>x</code> 的原关键字值.</li>
</ul>
<p>优先队列可以使用堆来实现, 我们来实现最大优先队列:</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> heap_maximum(heap_t *heap) &#123;</span><br><span class="line">	<span class="keyword">return</span> heap-&gt;element[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> heap_extract_max(heap_t *heap) &#123;</span><br><span class="line">	<span class="keyword">if</span> (heap-&gt;heap_size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">		fprinrf(stderr, <span class="string">"heap underflow"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> max = A[<span class="number">0</span>];</span><br><span class="line">	A[<span class="number">0</span>] = A[heap-&gt;heap_size];</span><br><span class="line">	heap-&gt;heap_size--;</span><br><span class="line">	max_heapify(heap, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void heap_increase_key(heap_t *heap, <span class="keyword">int</span> i, <span class="keyword">int</span> key) &#123;</span><br><span class="line">	<span class="keyword">if</span> (key &lt; heap-&gt;elements[i]) &#123;</span><br><span class="line">		fprinrf(stderr, <span class="string">"new key is smaller than current key"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	heap-&gt;elements[i] = key;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; heap-&gt;elements[parent(i)] &lt; A[i]) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = heap-&gt;elements[i];</span><br><span class="line">		heap-&gt;elements[i] = heap-&gt;elements[parent(i)];</span><br><span class="line">		heap-&gt;elements[parent(i)] = temp;</span><br><span class="line">		i = PARENT(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void max_heap_insert(heap_t *heap, <span class="keyword">int</span> key) &#123;</span><br><span class="line">	heap-&gt;heap_size++;</span><br><span class="line">	heap-&gt;elements[heap-&gt;heap_size] = INT_MIN;</span><br><span class="line">	heap_increase_key(heap, heap-&gt;heap_size - <span class="number">1</span>, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>一种时间复杂度为 <code>Ο(nlgn)</code> 的排序算法.</p>
<h2 id="堆">堆</h2><p><code>二叉堆</code> 是一个数组, 它可以被看成一个近似的完全二叉树, 除了最底层外, 该树是完全充满的, 而且是从左向右填充.</p>
<]]>
    </summary>
    
      <category term="Algorithm" scheme="http://deltax.me/tags/Algorithm/"/>
    
      <category term="clrs" scheme="http://deltax.me/categories/clrs/"/>
    
      <category term="Algorithm" scheme="http://deltax.me/categories/clrs/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Parameter Passing Mechanisms]]></title>
    <link href="http://deltax.me/2015/03/18/Parameter-Passing-Mechanisms/"/>
    <id>http://deltax.me/2015/03/18/Parameter-Passing-Mechanisms/</id>
    <published>2015-03-18T08:47:50.000Z</published>
    <updated>2015-03-24T17:38:00.000Z</updated>
    <content type="html"><![CDATA[<p>The operation of a data abstraction can have arguments and results. Many different mechanisms have been divised to pass the arguments and results between a calling program and an abstraction.</p>
<h3 id="Call_by_Reference">Call by Reference</h3><p>The identity of a <strong>language entity is passed to the procedure</strong>. The procedure can then use this language entity freely. This is the primitive mechanism used by the computation models of the book for all language entities including dataflow variables and cells.</p>
<h3 id="Call_by_Variable">Call by Variable</h3><p>This is a special case of call by reference. <strong>The identity of a cell is passed to the procedure</strong>.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">Sqr</span> A&#125;</span><br><span class="line">	A:=@A*@A</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">local</span><br><span class="line">	C=&#123;<span class="type">NewCell</span> <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	C:=<span class="number">25</span></span><br><span class="line">	&#123;<span class="type">Sqr</span> C&#125;</span><br><span class="line">	&#123;<span class="type">Browse</span> @C&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="Call_by_Value">Call by Value</h3><p>A value is passed to the procedure and put into a cell local to the procedure.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">Sqr</span> D&#125;</span><br><span class="line">	A=&#123;<span class="type">NewCell</span> D&#125;</span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	A:=@A+<span class="number">1</span></span><br><span class="line">	&#123;<span class="type">Browse</span> @A*@A&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#123;<span class="type">Sqrt</span> <span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure>
<p>The cell a is initialized with the arguement of <code>Sqr</code>.</p>
<h3 id="Call_by_Value-result">Call by Value-result</h3><p>This is a modification of call by variable. When the procedure is called, the content of a cell is put into another mutable variable local to the procedure. When the procedure returns, the content of the latter cell is put into the former cell.</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">proc <span class="list">&#123;Sqr A&#125;</span></span><br><span class="line">	<span class="keyword">D</span>=<span class="list">&#123;NewCell @A&#125;</span></span><br><span class="line">in</span><br><span class="line">	<span class="keyword">D</span>:=@<span class="keyword">D</span>*@<span class="keyword">D</span></span><br><span class="line">	A:=@<span class="keyword">D</span></span><br><span class="line">end</span><br><span class="line">local</span><br><span class="line">	<span class="keyword">C</span>=<span class="list">&#123;NewCell 0&#125;</span></span><br><span class="line">in</span><br><span class="line">	<span class="keyword">C</span>:=<span class="number">25</span></span><br><span class="line">	<span class="list">&#123;Sqr C&#125;</span></span><br><span class="line">	<span class="list">&#123;Browse @C&#125;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>When entering the <code>Sqr</code>, <code>D</code> is assigned to the content of <code>A</code>. After computation, assigned the content of <code>D</code> back to the <code>C</code>. And we can reference <code>C</code> from outside.</p>
<h3 id="Call_by_Name">Call by Name</h3><p>This mechanism creates a function to wrap each argument which is called thunk. And each time argument is needed, call it as a function, and this returns an unwrapped argument.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">Sqr</span> A&#125;</span><br><span class="line">	&#123;A&#125;:=@&#123;A&#125;*@&#123;A&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">local C=&#123;<span class="type">NewCell</span> <span class="number">0</span>&#125; <span class="keyword">in</span></span><br><span class="line">	C:=<span class="number">25</span></span><br><span class="line">	&#123;<span class="type">Sqr</span> fun &#123;$&#125; C <span class="keyword">end</span>&#125;</span><br><span class="line">	&#123;<span class="type">Browse</span> @C&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>The function wrapped in thunk is called each time, the argument is needed.</p>
<h3 id="Call_by_Need">Call by Need</h3><p>This is a modification and improve of call by name, which the function is called at most once. When the function is first called, its result stored and used for subsequent evaluations.</p>
<pre><code><span class="keyword">proc</span> {<span class="type">Sqr</span> A}
    B={A}
<span class="keyword">in</span>
    B:=@B*@B
<span class="keyword">end</span>
local C={<span class="type">NewCell</span> <span class="number">0</span>} <span class="keyword">in</span>
    C:=<span class="number">25</span>
    {<span class="type">Sqr</span> fun {$} C <span class="keyword">end</span>}
    {<span class="type">Browse</span> @C}
<span class="keyword">end</span>
</code></pre><p>The argument <code>A</code> is evaluated when it is needed, and after first evaluate, it stored in the variable <code>B</code>, and then every time <code>A</code> is needed, just use <code>B</code> instead.</p>
<p>This approach is exactly the same concept as lazy evalution.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The operation of a data abstraction can have arguments and results. Many different mechanisms have been divised to pass the arguments and]]>
    </summary>
    
      <category term="CTMCP" scheme="http://deltax.me/tags/CTMCP/"/>
    
      <category term="Oz" scheme="http://deltax.me/tags/Oz/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Explicit State]]></title>
    <link href="http://deltax.me/2015/03/18/Explicit-State/"/>
    <id>http://deltax.me/2015/03/18/Explicit-State/</id>
    <published>2015-03-18T06:34:39.000Z</published>
    <updated>2015-03-24T17:19:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="State">State</h2><p>A <code>state</code> is a sequence of values in time that contains the intermediate results of a desired computation.</p>
<p>There are different ways that state can be used in a program.</p>
<ul>
<li>Implicit or declarative state<ul>
<li>The state need only exist in the mind of the programmer. It does not need any support at all from the computation model.</li>
</ul>
</li>
<li><p>Explicit state</p>
<ul>
<li><p>A procedure is a state whose lifetime extends over more than one procedure call without being present in the procedure’s arguments.</p>
  <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">local</span><br><span class="line">	C=<span class="comment">&#123;NewCell 0&#125;</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	fun <span class="comment">&#123;SumList Xs S&#125;</span></span><br><span class="line">		C:=@C+<span class="number">1</span></span><br><span class="line">		<span class="keyword">case</span> Xs</span><br><span class="line">		<span class="keyword">of</span> <span class="keyword">nil</span> <span class="keyword">then</span> S</span><br><span class="line">		[] X|Xr <span class="keyword">then</span> <span class="comment">&#123;SumList Xr X+S&#125;</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	fun <span class="comment">&#123;SumCount&#125;</span> @C <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">% <span class="keyword">In</span> this <span class="function"><span class="keyword">procedure</span>, <span class="title">C</span> <span class="title">is</span> <span class="title">not</span> <span class="title">an</span> <span class="title">arugment</span> <span class="title">for</span> <span class="title">the</span> <span class="title">function</span> <span class="title">SumList</span> <span class="title">and</span> <span class="title">we</span> <span class="title">can</span> <span class="title">use</span> <span class="title">another</span> <span class="title">helper</span> <span class="title">function</span> <span class="title">SumCount</span> <span class="title">to</span> <span class="title">get</span> <span class="title">its</span> <span class="title">value</span>.</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>* <span class="keyword">With</span> <span class="keyword">explicit</span> state, data abstraction gain tremendously <span class="keyword">in</span> modularity since <span class="keyword">is</span> <span class="keyword">is</span> possible <span class="keyword">to</span> **encapsulate an <span class="keyword">explicit</span> state inside a data abstraction**. <span class="keyword">And</span> the access <span class="keyword">to</span> state <span class="keyword">is</span> limited according <span class="keyword">to</span> the operations <span class="keyword">of</span> the data abstraction.
</code></pre><h2 id="Data_Abstraction">Data Abstraction</h2><p><strong>Data abstraction</strong> is a way of using data in abstract fashion, we can use the data without having to deal with its implementation. It contains a set of instances that can be used according to certain rules called interface.</p>
<h3 id="Organize_Data_Abstraction">Organize Data Abstraction</h3><ul>
<li><code>Openness and Security</code><ul>
<li>A data abstraction is <code>secure</code> if its encapsulation is enforced by the language. Otherwise it is open. If the data abstraction is open, the encapsulation should be <strong>enforced by programmer discipline</strong>.</li>
</ul>
</li>
<li><code>Bundling</code><ul>
<li>A data abstraction is <code>unbundled</code> if it defines two kinds of entities, called <strong>value and operation</strong>.</li>
<li>A data abstraction is <code>bundled</code> if it defines just one kind of entity, called <strong>object</strong>, that combines the notion of value and operation. (Which is sometimes called a precedural data abstraction, <code>PDA</code>)</li>
</ul>
</li>
<li><code>Explicit</code><ul>
<li>A data is stateful if it uses <strong>explicit state</strong>. Otherwise it is known as stateless or declarative.</li>
</ul>
</li>
</ul>
<p>We use these three axes, secure, bundling and explit state to organize data abstraction is <code>8</code> ways.</p>
<h3 id="Open_Declarative_Stack">Open Declarative Stack</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">% This <span class="built_in">version</span> is <span class="built_in">open</span>, declarative <span class="operator">and</span> unbundled.</span><br><span class="line"></span><br><span class="line">declare	</span><br><span class="line"><span class="built_in">local</span></span><br><span class="line">     fun &#123;NewStack&#125; nil <span class="function"><span class="keyword">end</span></span></span><br><span class="line">     fun &#123;Push S E&#125; E|S <span class="function"><span class="keyword">end</span></span></span><br><span class="line">     fun &#123;Pop S ?E&#125; <span class="keyword">case</span> S <span class="operator">of</span> X|S1 <span class="keyword">then</span> E=X S1 <span class="function"><span class="keyword">end</span> <span class="title">end</span></span></span><br><span class="line">     fun &#123;IsEmpty S&#125; S==nil <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="operator">in</span></span><br><span class="line">     Stack=stack(<span class="built_in">new</span>:NewStack push:Push pop:Pop isEmpty:IsEmpty)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Secure_Declarative_Unbundled_Stack">Secure Declarative Unbundled Stack</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">% This <span class="built_in">version</span> is secure, declarative <span class="operator">and</span> unbundled. </span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line"><span class="built_in">local</span> Wrap Unwrap</span><br><span class="line">     &#123;NewWrapper Wrap Unwrap&#125;</span><br><span class="line">     fun &#123;NewStack&#125; &#123;Wrap nil&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">     fun &#123;Push S E&#125; &#123;Wrap E|&#123;Unwrap S&#125;&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">     fun &#123;Pop S ?E&#125; <span class="keyword">case</span> &#123;Unwrap S&#125; <span class="operator">of</span> X|S1 <span class="keyword">then</span> E=X &#123;Wrap S1&#125; <span class="function"><span class="keyword">end</span> <span class="title">end</span></span></span><br><span class="line">     fun &#123;IsEmpty S&#125; &#123;Unwrap S&#125;==nil <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="operator">in</span></span><br><span class="line">     Stack=stack(<span class="built_in">new</span>:NewStack push:Push pop:Pop isEmpty:IsEmpty)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>The stack is unwrapped when entering an ADT and wrapped when the operation exits.</p>
<h3 id="Secure_Declarative_Bundled_Stack">Secure Declarative Bundled Stack</h3><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">% <span class="type">This</span> version is secure, declarative <span class="keyword">and</span> bundled.</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span></span><br><span class="line">     <span class="keyword">fun</span> &#123;<span class="type">StackObject</span> <span class="type">S</span>&#125;</span><br><span class="line">          <span class="keyword">fun</span> &#123;<span class="type">Push</span> <span class="type">E</span>&#125; &#123;<span class="type">StackObject</span> <span class="type">E</span>|<span class="type">S</span>&#125; <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">fun</span> &#123;<span class="type">Pop</span> ?<span class="type">E</span>&#125;</span><br><span class="line">               <span class="keyword">case</span> <span class="type">S</span> <span class="keyword">of</span> <span class="type">X</span>|<span class="type">S1</span> <span class="keyword">then</span> <span class="type">E</span>=<span class="type">X</span> &#123;<span class="type">StackObject</span> <span class="type">S1</span>&#125; <span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">fun</span> &#123;<span class="type">IsEmpty</span>&#125; <span class="type">S</span>==<span class="literal">nil</span> <span class="keyword">end</span></span><br><span class="line">     <span class="keyword">in</span> stack(push:<span class="type">Push</span> pop:<span class="type">Pop</span> isEmpty:<span class="type">IsEmpty</span>) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">     <span class="keyword">fun</span> &#123;<span class="type">NewStack</span>&#125; &#123;<span class="type">StackObject</span> <span class="literal">nil</span>&#125; <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>We can make a data abstraction secure only use <code>higher-order</code> programming instead of using explicit state and name.</p>
<p>Because this version is both secure and bundled, we cansider it as a declarative form of <code>object-oriented programming</code>.</p>
<h3 id="Secure_Stateful_Bundled_Stack">Secure Stateful Bundled Stack</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">% <span class="type">This</span> version <span class="keyword">is</span> secure, stateful <span class="keyword">and</span> bundled.</span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line">fun &#123;<span class="type">NewStack</span>&#125;</span><br><span class="line">     C=&#123;<span class="type">NewCell</span> <span class="keyword">nil</span>&#125;</span><br><span class="line">     <span class="keyword">proc</span> &#123;<span class="type">Push</span> E&#125; C:=E|@C <span class="keyword">end</span></span><br><span class="line">     fun &#123;<span class="type">Pop</span>&#125; <span class="keyword">case</span> @C <span class="keyword">of</span> X|<span class="type">S1</span> then C:=<span class="type">S1</span> X <span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line">     fun &#123;<span class="type">IsEmpty</span>&#125; @C=<span class="keyword">nil</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">     stack(push:<span class="type">Push</span> pop:<span class="type">Pop</span> isEmpty:<span class="type">IsEmpty</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>In this version the objectis represented by a recored of procedure values. This version provides the basic functionality of object-oriented programming, namely a group of operations <code>methods</code> with a hidden internal state.</p>
<h3 id="Secure_Stateful_Bundled_Stack_With_Procedure_Dispatching">Secure Stateful Bundled Stack With Procedure Dispatching</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">% <span class="type">This</span> version <span class="keyword">is</span> secure, stateful <span class="keyword">and</span> bundled.</span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line">fun &#123;<span class="type">NewStack</span>&#125;</span><br><span class="line">     C=&#123;<span class="type">NewCell</span> <span class="keyword">nil</span>&#125;</span><br><span class="line">     <span class="keyword">proc</span> &#123;<span class="type">Push</span> E&#125; C:=E|@C <span class="keyword">end</span></span><br><span class="line">     fun &#123;<span class="type">Pop</span>&#125; <span class="keyword">case</span> @C <span class="keyword">of</span> X|<span class="type">S1</span> then C:=<span class="type">S1</span> X <span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line">     fun &#123;<span class="type">IsEmpty</span>&#125; @C=<span class="keyword">nil</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">     <span class="keyword">proc</span> &#123;$ <span class="type">Msg</span>&#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">          <span class="keyword">of</span> push(X) then &#123;<span class="type">Push</span> X&#125;</span><br><span class="line">          [] pop(?E) then E=&#123;<span class="type">Pop</span>&#125;</span><br><span class="line">          [] isEmpty(?B) then B=&#123;<span class="type">IsEmpty</span>&#125;</span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>This is called procedure dispatching as opposed to the previous version which uses record dispatching. It is another way to implement secure, stateful bundled stack. With this approach, we use <code>{S.push X}</code> to invocate method <code>push</code>.</p>
<h3 id="Secure_Stateful_Unbundled_Stack">Secure Stateful Unbundled Stack</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">% This <span class="built_in">version</span> is secure, stateful <span class="operator">and</span> unbundled.</span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line"><span class="built_in">local</span> Wrap Unwrap</span><br><span class="line">     &#123;NewWrapper Wrap Unwrap&#125;</span><br><span class="line">     fun &#123;NewStack&#125; &#123;Wrap &#123;NewCell nil&#125;&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">     proc &#123;Push S E&#125; C=&#123;Unwrap S&#125; <span class="operator">in</span> C:=E|@C <span class="function"><span class="keyword">end</span></span></span><br><span class="line">     fun &#123;Pop S&#125;</span><br><span class="line">          C=&#123;Unwrap S&#125; <span class="operator">in</span> <span class="keyword">case</span> @C <span class="operator">of</span> X|S1 <span class="keyword">then</span> C:=S1 X <span class="function"><span class="keyword">end</span> <span class="title">end</span></span></span><br><span class="line">     fun &#123;IsEmpty S&#125; @&#123;Unwrap S&#125;==nil <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="operator">in</span></span><br><span class="line">     Stack=stack(<span class="built_in">new</span>:NewStack push:Push pop:Pop isEmpty:IsEmpty)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>This style is little used in object-oriented programming, but deserves to be more widely known. In this version, we group four operations in a module.</p>
<h2 id="Polymorphism">Polymorphism</h2><p><code>Polymorphism</code> is the ability of an entity to take om many forms. In the context of data abstraction, we say an operation is polymorphic if it works correct for arguments of different types.</p>
<ul>
<li>The <code>object</code> stype has an advantage over the <code>ADT</code> style in that polymorphism is particularly easy to express.</li>
<li>The <code>ADT</code> style gives more freedom to make efficient implementation.</li>
</ul>
<h3 id="An_Example:_Collection_Type">An Example: Collection Type</h3><p>We implement a collection type in both <code>object</code> and <code>ADT</code> style which with three operations.</p>
<p>First, we use <code>ADT</code> to implement the stateful unbundled collection:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> Wrap Unwrap</span><br><span class="line">	&#123;NewWrapper Wrap Unwrap&#125;</span><br><span class="line">	fun &#123;NewCollection&#125; &#123;Wrap &#123;Stack.<span class="built_in">new</span>&#125;&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	proc &#123;Put C X&#125; S=&#123;Unwrap C&#125; <span class="operator">in</span> &#123;Stack.push S X&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	fun &#123;Get C&#125; S=&#123;Unwrap C&#125; <span class="operator">in</span> &#123;Stack.pop S&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	fun &#123;IsEmpty C&#125; &#123;Stack.isEmpty &#123;Unwrap C&#125;&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="operator">in</span></span><br><span class="line">	Collection=collection(<span class="built_in">new</span>:NewCollection <span class="built_in">put</span>:Put <span class="built_in">get</span>:Get</span><br><span class="line">						  isEmpty:IsEmpty)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>Then, implement this with object style:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fun &#123;NewCollection&#125;</span><br><span class="line">	S=&#123;NewStack&#125;</span><br><span class="line">	proc &#123;Put X&#125; &#123;S.<span class="built_in">put</span> X&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	fun &#123;Get X&#125; &#123;S.pop&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	fun &#123;IsEmpty&#125; &#123;S.isEmpty&#125; <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="operator">in</span></span><br><span class="line">	collection(<span class="built_in">put</span>:Put <span class="built_in">get</span>:Pop isEmpty:IsEmpty)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>Now we have out colletion type with both styles, in order to compare the difference between them, let us add an operation <code>union</code> to this collection type.</p>
<h3 id="Adding_a_union_Operation_in_the_ADT_case">Adding a <code>union</code> Operation in the ADT case</h3><p>To implement <code>union</code>, let us introduce a control abstraction:</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">DoUntil</span> <span class="type">BF</span> S&#125;</span><br><span class="line">	<span class="keyword">if</span> &#123;<span class="type">BF</span>&#125; then skip <span class="keyword">else</span> &#123;S&#125; &#123;<span class="type">DoUntil</span> <span class="type">BF</span> S&#125; <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>With <code>DoUntil</code>, we can implement the new <code>Collection</code> type as follows.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">% <span class="type">Use</span> <span class="type">Internal</span> representations</span><br><span class="line"></span><br><span class="line">local <span class="type">Wrap</span> <span class="type">Unwrap</span></span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">proc</span> &#123;<span class="type">Union</span> <span class="type">C1</span> <span class="type">C2</span>&#125;</span><br><span class="line">	<span class="type">S1</span>=&#123;<span class="type">Unwrap</span> <span class="type">C1</span>&#125; <span class="type">S2</span>=&#123;<span class="type">Unwrap</span> <span class="type">C2</span>&#125; <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">DoUntil</span> fun &#123;$&#125; &#123;<span class="type">Stack</span>.isEmpty <span class="type">S2</span>&#125; <span class="keyword">end</span></span><br><span class="line">		<span class="keyword">proc</span> &#123;$&#125; &#123;<span class="type">Stack</span>.push <span class="type">S1</span> &#123;<span class="type">Stack</span>.pop <span class="type">S2</span>&#125;&#125; <span class="keyword">end</span>&#125;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	<span class="type">Collection</span>=collection(... union:<span class="type">Union</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">% <span class="type">Use</span> external interfaces</span><br><span class="line"></span><br><span class="line">local <span class="type">Wrap</span> <span class="type">Unwrap</span></span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">proc</span> &#123;<span class="type">Union</span> <span class="type">C1</span> <span class="type">C2</span>&#125;</span><br><span class="line">	<span class="type">S1</span>=&#123;<span class="type">Unwrap</span> <span class="type">C1</span>&#125; <span class="type">S2</span>=&#123;<span class="type">Unwrap</span> <span class="type">C2</span>&#125; <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">DoUntil</span> fun &#123;$&#125; &#123;<span class="type">Collection</span>.isEmpty <span class="type">S2</span>&#125; <span class="keyword">end</span></span><br><span class="line">		<span class="keyword">proc</span> &#123;$&#125; &#123;<span class="type">Collection</span>.put <span class="type">S1</span> &#123;<span class="type">Collection</span>.get <span class="type">S2</span>&#125;&#125; <span class="keyword">end</span>&#125;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	<span class="type">Collection</span>=collection(... union:<span class="type">Union</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>We have choice of whether or not to use the internal representation of each collection argument. This gives us the freedom to make a <strong>more efficient implementation</strong>.</p>
<h3 id="Adding_a_union_Operation_in_the_Object_case">Adding a <code>union</code> Operation in the Object case</h3><p>Let us implement <code>union</code> operation in object stype. This is called as <code>{C1 union(C2)}</code>.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">% <span class="type">Use</span> internal representation <span class="keyword">of</span> <span class="type">C1</span> but external <span class="keyword">interface</span> <span class="keyword">of</span> <span class="type">C2</span></span><br><span class="line"></span><br><span class="line">fun &#123;<span class="type">NewCollection</span>&#125;</span><br><span class="line">	<span class="type">S1</span>=&#123;<span class="type">NewStack</span>&#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">proc</span> &#123;<span class="type">Union</span> <span class="type">C2</span>&#125;</span><br><span class="line">		&#123;<span class="type">DoUntil</span> <span class="type">C2</span>.isEmpty</span><br><span class="line">		<span class="keyword">proc</span> &#123;$&#125; &#123;<span class="type">S1</span>.push &#123;<span class="type">C2</span>.get&#125;&#125; <span class="keyword">end</span>&#125;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	collection(... union:<span class="type">Union</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>The implementation uses the <strong>internal representation</strong> of <code>C1</code> but the external interface of <code>C2</code>. This is a crucial difference with the <code>ADT</code> stype. We can also use both <strong>external interfaces</strong> to implement this operation again.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">% <span class="type">Use</span> external interfaces</span><br><span class="line"></span><br><span class="line">fun &#123;<span class="type">NewCollection</span>&#125;</span><br><span class="line">	<span class="type">S1</span>=&#123;<span class="type">NewStack</span>&#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">proc</span> &#123;<span class="type">Union</span> <span class="type">C2</span>&#125;</span><br><span class="line">		&#123;<span class="type">DoUntil</span> <span class="type">C2</span>.isEmpty</span><br><span class="line">		<span class="keyword">proc</span> &#123;$&#125; &#123;<span class="type">This</span>.push &#123;<span class="type">C2</span>.get&#125;&#125; <span class="keyword">end</span>&#125;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="type">This</span>=collection(... union:<span class="type">Union</span>)</span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">	<span class="type">This</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>The object <code>C1</code> refers to itself through the variable <code>This</code>.</p>
<h3 id="Decision_between_ADT_and_Object_styles">Decision between ADT and Object styles</h3><ul>
<li>The <code>ADT</code> style can be more efficient because it allows accessing both internal representations.</li>
<li>Sometimes the <code>ADT</code> style is the only one that works. Especially when we deal with addtion between integer.</li>
<li>The <code>object</code> style provides polyphism “for free”.</li>
<li>The <code>object</code> style is not limited to sequential objects.</li>
<li>The ‘ADT` style provides polymorohism if the language has first-class modules.</li>
<li>If we use the <code>ADT</code> style without first-class modules, then we must write new code to get types to interoperate.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="State">State</h2><p>A <code>state</code> is a sequence of values in time that contains the intermediate results of a desired computa]]>
    </summary>
    
      <category term="CTMCP" scheme="http://deltax.me/tags/CTMCP/"/>
    
      <category term="Oz" scheme="http://deltax.me/tags/Oz/"/>
    
      <category term="Programming Paradigm" scheme="http://deltax.me/categories/Programming-Paradigm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Message-Passing Concurrency]]></title>
    <link href="http://deltax.me/2015/03/16/Message-Passing-Concurrency/"/>
    <id>http://deltax.me/2015/03/16/Message-Passing-Concurrency/</id>
    <published>2015-03-15T17:13:25.000Z</published>
    <updated>2015-03-24T17:36:39.000Z</updated>
    <content type="html"><![CDATA[<p><code>Message-passing</code> is a programming style in which a program consists of independent entities that interact by sending each other messages asynchronously.</p>
<h2 id="Why_Message-passing_important?">Why Message-passing important?</h2><ul>
<li>It is the basic framework for <strong>multi-agent</strong> systems.</li>
<li>It is the natural stype for a <strong>distributed</strong> system.</li>
<li>It lends itself well to building highly reliable systems.</li>
</ul>
<h2 id="Message-passing_concurrent_model">Message-passing concurrent model</h2><p>The message-passing concurrent model extends the declarative concurrent model by adding ports. We add two operions to manipulate ports.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;NewPort &lt;y&gt; &lt;x&gt;&#125;  Port creation: <span class="built_in">create</span> <span class="operator">a</span> <span class="built_in">new</span> port <span class="operator">with</span> entry point &lt;x&gt; <span class="operator">and</span> stream &lt;y&gt;</span><br><span class="line">&#123;Send &lt;x&gt; &lt;y&gt;&#125;     Port <span class="built_in">send</span>: append &lt;y&gt; <span class="built_in">to</span> he stream corresponding <span class="built_in">to</span> <span class="operator">the</span> entry point &lt;x&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Port_Objects">Port Objects</h2><p>A <code>port object</code> is a combination of one or more ports and a stream object. This extends stream objects in two ways.</p>
<ol>
<li><strong>Many-to-one communication</strong> is possible, many threads can reference a given port object and send message to it independently.</li>
<li>Port objects can be <strong>embedded inside data structures</strong>.</li>
</ol>
<p>In message-passing model, a program consists of a set of port objects sending and receiving messages. </p>
<ul>
<li>Port objects can create new port objects. </li>
<li>Port objects can send messages containing references to other port objects.</li>
</ul>
<h3 id="NewPortObject_abstraction">NewPortObject abstraction</h3><p>We can define an abstraction to make it easier to program with port objects.</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun &#123;NewPortObject Init Fun&#125;</span><br><span class="line"><span class="built_in">Sin</span> Sout <span class="keyword">in</span></span><br><span class="line">	thread &#123;FoldL <span class="built_in">Sin</span> FUn Init Sout&#125; <span class="keyword">end</span></span><br><span class="line">	&#123;NewPort <span class="built_in">Sin</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fun &#123;NewPortObject2 Proc&#125;</span><br><span class="line"><span class="built_in">Sin</span> <span class="keyword">in</span></span><br><span class="line">	thread <span class="keyword">for</span> Msg <span class="keyword">in</span> <span class="built_in">Sin</span> <span class="keyword">do</span> &#123;Proc Msg&#125; <span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line">	&#123;NewPort <span class="built_in">Sin</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="Message_Protocol">Message Protocol</h2><p>We can use message-passing paradigm to model simple message protocol.</p>
<h3 id="RMI">RMI</h3><p><code>RMI</code> is the most popular of the simple protocols. It allows to call another object in a different operating system process.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ServerProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> calc(X Y) then</span><br><span class="line">		Y=X*X+<span class="number">2</span>.<span class="number">0</span>*X+<span class="number">2</span>.<span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="type">Server</span>=&#123;<span class="type">NewPortObject2</span> <span class="type">ServerProc</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ClientProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> work(Y) then <span class="type">Y1</span> <span class="type">Y2</span> <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">1</span>.<span class="number">0</span> <span class="type">Y1</span>)&#125;</span><br><span class="line">		&#123;<span class="type">Wait</span> <span class="type">Y1</span>&#125;</span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">2</span>.<span class="number">0</span> <span class="type">Y1</span>)&#125;</span><br><span class="line">		&#123;<span class="type">Wait</span> <span class="type">Y2</span>&#125;</span><br><span class="line">		Y=<span class="type">Y1</span>+<span class="type">Y2</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="type">Client</span>=&#123;<span class="type">NewPortObject2</span> <span class="type">ClientProc</span>&#125;</span><br><span class="line">&#123;<span class="type">Browse</span> &#123;<span class="type">Send</span> <span class="type">Client</span> work($)&#125;&#125;</span><br><span class="line"></span><br><span class="line">// <span class="number">15</span></span><br></pre></td></tr></table></figure>
<h3 id="Asynchronous_RMI">Asynchronous RMI</h3><p>This protocol is similar to <code>RMI</code>, except that the client continues immediately after sending the request. The client is informed when the reply arrives. Multiple requests can be handled in rapid succession.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ClientProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> work(?Y) then <span class="type">Y1</span> <span class="type">Y2</span> <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">1</span>.<span class="number">0</span> <span class="type">Y1</span>)&#125;</span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">2</span>.<span class="number">0</span> <span class="type">Y1</span>)&#125;</span><br><span class="line">		Y=<span class="type">Y1</span>+<span class="type">Y2</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="type">Client</span>=&#123;<span class="type">NewPortObject2</span> <span class="type">ClientProc</span>&#125;</span><br><span class="line">&#123;<span class="type">Browse</span> &#123;<span class="type">Send</span> <span class="type">Client</span> work($)&#125;&#125;</span><br><span class="line">// <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>Requests are handled by the server the same order as they are sent and replies arrive in that order as well.</p>
<h3 id="RMI_with_callback">RMI with callback</h3><p>Here is a server that does a callback to find the value of a special value <code>delta</code> only known by the client.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ServerProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> calc(X ?Y <span class="type">Client</span>) then <span class="type">X1</span> D <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Client</span> delta(D)&#125;</span><br><span class="line">		<span class="type">X1</span>=X+D</span><br><span class="line">		Y=<span class="type">X1</span>*<span class="type">X1</span>+<span class="number">2</span>.<span class="number">0</span>*<span class="type">X1</span>+<span class="number">2</span>.<span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="type">Server</span>=&#123;<span class="type">NewPortObject2</span> <span class="type">ServerProc</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ClientProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> work(?Z) then Y <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">10</span>.<span class="number">0</span> Y <span class="type">Client</span>)&#125;</span><br><span class="line">		Z=Y+<span class="number">100</span>.<span class="number">0</span></span><br><span class="line">	[] delta(?D) then</span><br><span class="line">		D=<span class="number">1</span>.<span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="type">Client</span>=&#123;<span class="type">NewPortObject2</span> <span class="type">ClientProc</span>&#125;</span><br><span class="line">&#123;<span class="type">Browse</span> &#123;<span class="type">Send</span> <span class="type">Client</span> work($)&#125;&#125;</span><br><span class="line">	</span><br><span class="line">// _</span><br></pre></td></tr></table></figure>
<p>This solution not work, because the client suspends when it calls th server, so that the server cannot call the client.</p>
<h4 id="Using_thread">Using thread</h4><p>First, we use concurrency to solve this problem.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proc &#123;ClientProc Msg&#125;</span><br><span class="line">	<span class="keyword">case</span> Msg</span><br><span class="line">	<span class="operator">of</span> work(?Z) <span class="keyword">then</span> Y <span class="operator">in</span></span><br><span class="line">		&#123;Send Server calc(<span class="number">10.0</span> Y Client)&#125;</span><br><span class="line">		thread Z=Y+<span class="number">100.0</span> <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	[] delta(?D) <span class="keyword">then</span></span><br><span class="line">		D=<span class="number">1.0</span></span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="comment"></span><br><span class="line">// 245.0</span></span><br></pre></td></tr></table></figure>
<p>After the client sent a message to the server, it does not suspend, because the <code>thread</code> creates a new thread and execute it on it.</p>
<h4 id="Using_record_continuation">Using record continuation</h4><p>Instead of using thread, we can use record to solve this issue. In this way, the client never waits and deadlock is avoiding.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ServerProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> calc(X <span class="type">Client</span> <span class="type">Cont</span>) then <span class="type">X1</span> D Y <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Client</span> delta(D)&#125;</span><br><span class="line">		<span class="type">X1</span>=X+D</span><br><span class="line">		Y=<span class="type">X1</span>*<span class="type">X1</span>+<span class="number">2</span>.<span class="number">0</span>*<span class="type">X1</span>+<span class="number">2</span>.<span class="number">0</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Client</span> <span class="type">Cont</span><span class="comment">#Y&#125;</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="type">Server</span>=&#123;<span class="type">NewPortObject2</span> <span class="type">ServerProc</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ClientProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> work(?Z) then Y <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">10</span>.<span class="number">0</span> <span class="type">Client</span> cont(Z))&#125;</span><br><span class="line">	[] cont(Z)<span class="comment">#Y then</span></span><br><span class="line">		Z=Y+<span class="number">100</span>.<span class="number">0</span></span><br><span class="line">	[] delta(?D) then</span><br><span class="line">		D=<span class="number">1</span>.<span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="type">Client</span>=&#123;<span class="type">NewPortObject2</span> <span class="type">ClientProc</span>&#125;</span><br><span class="line">&#123;<span class="type">Browse</span> &#123;<span class="type">Send</span> <span class="type">Client</span> work($)&#125;&#125;</span><br><span class="line"></span><br><span class="line">// <span class="number">245</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>When we pass <code>work</code> message to <code>client</code> it immediately send <code>server</code> message <code>calc</code>. After the server execute <code>calc</code>, it pass back <code>Cont#Y</code> back to the client, then client finishes the calculation.</p>
<h4 id="Using_procedure_continuation">Using procedure continuation</h4><p>The previous example can be generalized in a powerful way by passing a precedure instead of a record.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ClientProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> work(?Z) then</span><br><span class="line">		C=<span class="keyword">proc</span> &#123;$ Y&#125; Z=Y+<span class="number">100</span>.<span class="number">0</span> <span class="keyword">end</span></span><br><span class="line">	<span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">10</span>.<span class="number">0</span> <span class="type">Client</span> cont(C))&#125;</span><br><span class="line">	[] cont(C)<span class="comment">#Y then</span></span><br><span class="line">		&#123;C Y&#125;</span><br><span class="line">	[] delta(?D) then</span><br><span class="line">		D=<span class="number">1</span>.<span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>The continuation contains the work that the client has to do after the server returns. Since the continuation is a procedure value, it is self-contained, it can be executed by anyone without knowing anything inside it.    </p>
<h4 id="Asynchronous_RMI_with_callback">Asynchronous RMI with callback</h4><p>We might want to do two asynchronous RMIs where each <code>RMI</code> does a callback.</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ServerProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> calc(X ?Y <span class="type">Client</span>) then <span class="type">X1</span> D <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Client</span> delta(D)&#125;</span><br><span class="line">		thread </span><br><span class="line">			<span class="type">X1</span>=X+D</span><br><span class="line">			Y=<span class="type">X1</span>*<span class="type">X1</span>+<span class="number">2</span>.<span class="number">0</span>*<span class="type">X1</span>+<span class="number">2</span>.<span class="number">0</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">proc</span> &#123;<span class="type">ClientProc</span> <span class="type">Msg</span>&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Msg</span></span><br><span class="line">	<span class="keyword">of</span> work(?Z) then <span class="type">Y1</span> <span class="type">Y2</span> <span class="keyword">in</span></span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">10</span>.<span class="number">0</span> <span class="type">Y1</span> <span class="type">Client</span>)&#125;</span><br><span class="line">		&#123;<span class="type">Send</span> <span class="type">Server</span> calc(<span class="number">20</span>.<span class="number">0</span> <span class="type">Y2</span> <span class="type">Client</span>)&#125;</span><br><span class="line">		thread Y=<span class="type">Y1</span>+<span class="type">Y2</span> <span class="keyword">end</span></span><br><span class="line">	[] delta(?D) then</span><br><span class="line">		D=<span class="number">1</span>.<span class="number">0</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="Double_callback">Double callback</h4><p>When the server does a first callback to client, and which itself calls a second callback to the server. To handle this, both the client and the server should response immediately and not wait until the result come back.</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">proc &#123;ServerProc Msg&#125;</span><br><span class="line">	<span class="keyword">case</span> Msg</span><br><span class="line">	<span class="operator">of</span> calc(X ?Y Client) <span class="keyword">then</span> X1 D <span class="operator">in</span></span><br><span class="line">		&#123;Send Client delta(D)&#125;</span><br><span class="line">		thread </span><br><span class="line">			X1=X+D</span><br><span class="line">			Y=X1*X1+<span class="number">2.0</span>*X1+<span class="number">2.0</span></span><br><span class="line">		<span class="function"><span class="keyword">end</span></span></span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line">	[] serverdelta(?S) <span class="keyword">then</span></span><br><span class="line">		S=<span class="number">0.01</span></span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br><span class="line"></span><br><span class="line">proc &#123;ClientProc Msg&#125;</span><br><span class="line">	<span class="keyword">case</span> Msg</span><br><span class="line">	<span class="operator">of</span> work(?Z) <span class="keyword">then</span> Y <span class="operator">in</span></span><br><span class="line">		&#123;Send Server calc(<span class="number">10.0</span> Y Client)&#125;</span><br><span class="line">		thread Z=Y+<span class="number">100.0</span> <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	[] delta(?D) <span class="keyword">then</span> S <span class="operator">in</span></span><br><span class="line">		&#123;Send Server serverdelta(S)&#125;</span><br><span class="line">		thread D=<span class="number">1.0</span>+S <span class="function"><span class="keyword">end</span></span></span><br><span class="line">	<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>Calling <code>{Send Client work(Z)}</code> calls the server, which calls the client method <code>delta(D)</code>, which iteself calls the server method <code>serverdelta(?S)</code>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>Message-passing</code> is a programming style in which a program consists of independent entities that interact by sending each oth]]>
    </summary>
    
      <category term="CTMCP" scheme="http://deltax.me/tags/CTMCP/"/>
    
      <category term="Concurrency" scheme="http://deltax.me/tags/Concurrency/"/>
    
      <category term="Oz" scheme="http://deltax.me/tags/Oz/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分治策略]]></title>
    <link href="http://deltax.me/2015/03/15/%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/"/>
    <id>http://deltax.me/2015/03/15/分治策略/</id>
    <published>2015-03-15T07:14:54.000Z</published>
    <updated>2015-03-24T17:41:03.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>在计算机科学中, <a href="http://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95" target="_blank" rel="external">分治法</a>是基于多项分支递归的一种很重要的算法范式. 字面上的解释是”分而治之”, 就是把一个复杂的问题分成两个或更多的相同或相似的子问题, 知道最后子问题可以简单的直接求解, 原问题的解就是子问题的解的合并.</p>
</blockquote>
<h2 id="分治法的步骤">分治法的步骤</h2><ol>
<li>分解: 将问题划分为一些子问题, 子问题的形式与原问题相同, <strong>只是规模更小</strong>.</li>
<li>解决: <strong>递归</strong>地求解出子问题. </li>
<li>合并: 将子问题的解<strong>合并</strong>.</li>
</ol>
<h2 id="求解递归式的方法">求解递归式的方法</h2><ol>
<li>代入法</li>
<li>递归树法</li>
<li>主方法</li>
</ol>
<p>在这里我们不对前两种方法进行说明, 仅仅讨论一下主方法的使用, 以及适用的情况.</p>
<h3 id="主方法">主方法</h3><p>主方法<code>(Master Method)</code>可以求解一下形式的递归式的边界.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">T</span><span class="params">(n)</span></span> = <span class="function"><span class="title">aT</span><span class="params">(n/b)</span></span> + <span class="function"><span class="title">f</span><span class="params">(n)</span></span></span><br></pre></td></tr></table></figure>
<p>其中 <code>a &gt;= 1</code> <code>b &gt; 1</code> <code>f(n)</code> 是一个给定的函数. 这个递归式刻画了一个如下的分治算法:</p>
<blockquote>
<p>生成 <code>a</code> 个子问题, 每个子问题的规模是原问题规模的 <code>1/b</code> , 分解和合并步骤总共消耗 <code>f(n)</code> 的时间.</p>
</blockquote>
<h4 id="使用">使用</h4><ol>
<li>求出 <code>c = log(b,a)</code> </li>
<li>比较 <code>n^c</code> 与 <code>f(n)</code> 的大小<ul>
<li>如果前者<strong>多项式</strong>的小于后者, 那么该递归式的边界为 <code>Θ(f(n))</code>.</li>
<li>如果前者<strong>多项式</strong>的大于后者, 那么该递归式的边界为 <code>Θ(n^log(b,a))</code>.</li>
<li>如果两者<strong>多项式</strong>意义上的相等, 那么只需要乘上一个对数因子 <code>lgn</code>, ex, <code>T(n) = T(n/2) + 1 =&gt; Θ(lgn)</code></li>
</ul>
</li>
</ol>
<h4 id="总结">总结</h4><p>恰当运用主方法可以解决大多数的递归式边界问题, 但是当两项非多项式意义上的小于或者大于, 那么就不能使用主方法求解, ex, <code>T(n)=2T(n/2)+n/lgn</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>在计算机科学中, <a href="http://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95" target="_blank" rel="external">分治法</a>是基于多项分支递归的]]>
    </summary>
    
      <category term="Algorithm" scheme="http://deltax.me/tags/Algorithm/"/>
    
      <category term="clrs" scheme="http://deltax.me/categories/clrs/"/>
    
      <category term="Algorithm" scheme="http://deltax.me/categories/clrs/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP报文内的HTTP信息]]></title>
    <link href="http://deltax.me/2015/01/27/HTTP%E6%8A%A5%E6%96%87%E5%86%85%E7%9A%84HTTP%E4%BF%A1%E6%81%AF.md/"/>
    <id>http://deltax.me/2015/01/27/HTTP报文内的HTTP信息.md/</id>
    <published>2015-01-27T04:17:20.000Z</published>
    <updated>2015-03-24T10:52:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HTTP报文">HTTP报文</h2><p><code>HTTP报文</code>是由多行数据构成的字符串文本, 大致可分为<strong>报文首部</strong>和<strong>报文主体</strong>两部分.</p>
<pre><code><span class="code">------------------
|     报文首部     |
------------------</span>
<span class="header">|  空行(CR + LF)  |
------------------</span>
|                |
|     报文主体    |
<span class="header">|                | 
------------------</span>
</code></pre><p>请求报文和响应报文的主要区别在于<strong>请求行</strong>和<strong>状态行</strong>的不同.</p>
<pre><code><span class="attribute">请求报文首部 </span>=<span class="string"> 请求行 + 请求首部字段 + 通用首部字段 + 实体首部字段 + 其他
响应报文首部 = 响应行 + 响应首部字段 + 响应首部字段 + 实体首部字段 + 其他</span>
</code></pre><p>可以通过<code>Range</code>字段获取部分内容的范围请求</p>
<pre><code><span class="attribute">Range</span>: <span class="string">bytes=5001-10000</span>
<span class="attribute">Range</span>: <span class="string">bytes=5001-</span>
<span class="attribute">Range</span>: <span class="string">bytes=-3000, 5000-7000</span>
</code></pre><p>当Web界面有多份相同的内容时, 根据浏览器的默认语言会返回不同的界面, 例如中文版或者英文版, 这样的机制就叫做<strong>内容协商</strong>.</p>
<p><strong>内容协商</strong>就是客户端和服务端对响应的资源内容进行交涉, 返回合适的内容, 具体有以下三种类型.</p>
<ul>
<li>服务端驱动协商(Server-driven Negotiation)</li>
<li>客户端驱动协商(Client-driven Negotiation)</li>
<li>透明协商(Transparent Negotiation)</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="HTTP报文">HTTP报文</h2><p><code>HTTP报文</code>是由多行数据构成的字符串文本, 大致可分为<strong>报文首部</strong>和<strong>报文主体</strong>两部分.</p>
<pre><code><span c]]>
    </summary>
    
      <category term="HTTP" scheme="http://deltax.me/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单的HTTP协议]]></title>
    <link href="http://deltax.me/2015/01/24/%E7%AE%80%E5%8D%95%E7%9A%84HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://deltax.me/2015/01/24/简单的HTTP协议/</id>
    <published>2015-01-24T13:59:11.000Z</published>
    <updated>2015-01-24T14:19:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HTTP协议">HTTP协议</h2><p><code>HTTP</code>协议主要用于客户端和服务端之间的通信, 应用HTTP协议时必须是一端担任客户端角色, 一端担任服务端角色</p>
<ul>
<li>客户端发送HTTP请求</li>
<li>服务端进行响应回复</li>
</ul>
<h2 id="请求报文">请求报文</h2><pre><code>请求报文 = 请求方法 + URI + 协议版本 + (请求首部) + (内容实体)

GET <span class="regexp">/index.htm HTTP/</span><span class="number">1.1</span>
<span class="string">HOST:</span> DeltaX.me
</code></pre><ul>
<li><code>GET</code>表示访问服务器的类型, 也就是<code>Method</code></li>
<li><code>/index.htm</code>指明请求的资源对象, 也叫<code>URI</code></li>
<li><code>HTTP/1.1</code>为<code>HTTP</code>的版本号</li>
<li>这段请求的意思是访问HTTP服务器上的<code>/index.htm</code>资源</li>
</ul>
<h2 id="响应报文">响应报文</h2><pre><code>请求报文 = 协议版本 + 状态码 + 原因短语 + (响应首部字段) + 实体主体

HTTP/<span class="number">1.1</span> <span class="number">200</span> OK
<span class="string">Date:</span> Sat, <span class="number">23</span> January <span class="number">2014</span> <span class="number">22</span>:<span class="number">07</span>:<span class="number">00</span> GMT
Content-<span class="string">Length:</span> <span class="number">500</span>
Content-<span class="string">Type:</span> text/html

&lt;html&gt;.....
</code></pre><ul>
<li>状态码表示请求的处理结果</li>
<li>原因短语用于解释状态码</li>
</ul>
<h2 id="无状态协议和Cookie">无状态协议和Cookie</h2><p><code>HTTP</code>协议自身不对请求和响应之间的通信状态进行保存, 对于发送过的请求和响应<strong>不做持久化处理</strong>. 由于不必保存状态, 自然可以减轻服务器的CPU以及内存资源的销号, 但是要解决状态的问题, 引入了<code>Cookie</code>技术.</p>
<p>Cookie会根据从服务器端发送的响应豹纹的<code>Set-Cookie</code>的首部字段信息, 通知客户端保存<code>Cookie</code>. 当下次客户端向服务器发送通信时, 客户端后自动在请求报文中加入<code>Cookie</code>值后发送出去, 服务端接收<code>Cookie</code>值之后, 会对比服务器上的记录, 得到之前的状态信息.</p>
<h2 id="持久连接和管线化">持久连接和管线化</h2><p>为了解决<code>TCP</code>连接的问题, <code>HTTP/1.1</code>和一部分<code>HTTP/1.0</code>实现了<em>持久连接</em>(HTTP keep-alive)方法</p>
<ul>
<li>只要任意一端没有明确提出断开连接, 则保持<code>TCP</code>连接状态</li>
<li><code>HTTP/1.1</code>中所有的连接默认都是持久连接, 这样可以减轻服务器负担, 减少了<code>TCP</code>连接的重复建立和断开造成的额外开销.</li>
</ul>
<p><em>管线化</em>及同时并行发送多个请求, 不需要依次等待相应.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="HTTP协议">HTTP协议</h2><p><code>HTTP</code>协议主要用于客户端和服务端之间的通信, 应用HTTP协议时必须是一端担任客户端角色, 一端担任服务端角色</p>
<ul>
<li>客户端发送HTTP请求</li>
<li>服务端进行响]]>
    </summary>
    
      <category term="HTTP" scheme="http://deltax.me/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SICP 1.1 The Elements of Programming]]></title>
    <link href="http://deltax.me/2015/01/19/SICP-1-1/"/>
    <id>http://deltax.me/2015/01/19/SICP-1-1/</id>
    <published>2015-01-19T02:06:27.000Z</published>
    <updated>2015-03-24T17:39:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Summary">Summary</h1><p>This blog just a summary of what I learned from SICP and the solution I made for exercises.</p>
<p>There are three tips on how our mind works and how we build abstractions.</p>
<ol>
<li>Combining several simple ideas into one compound one, one thus all complex idea are made.</li>
<li>The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without untiling them into one, by which it gets all its ideas of relations.</li>
<li>Thr third is separating them from all other ideas that accompany them in their existence.</li>
</ol>
<p>Every powerful language has three mechanisms for accomplishing this</p>
<ol>
<li><strong>primitive expressions</strong>, which represent the simplest entities the language is concerned with.</li>
<li><strong>means of combination</strong>, by which compound elements are built from simpler ones, and</li>
<li><strong>means of abstraction</strong>, by which compound elements can be named and manipulated as units.</li>
</ol>
<p>In programming, we just deal with two kinds of elements: <code>procedures</code> and <code>data</code>. Data is ‘stuff’ we manipulated and procedures are descriptions of the rules for manipulating the data. When we learn a new programming language, the first three thing we should learn is what is the primitive expressions in this language, how to combinate those primitive elements, and how to abstract them to make many complex system.</p>
<p>In <code>Scheme</code> and many other languages <code>define</code> is means of abstraction. We can use <code>define</code> to add a tuple to the global environment, such as <code>(define a 3)</code> is to associate <code>a</code> with a value 3.</p>
<p>And then, what are the important things in LISP, the most powerful programming language</p>
<ul>
<li>Numbers and arithmetic operations are primitive data and procedures.</li>
<li>Nesting of combination provides a means of combing operations.</li>
<li>Definitions that associate names with values provide a limited means of abstraction.</li>
</ul>
<p>Substitution model for procedure application is not to provide a description of how the interpreter really works. It just helps us how to think about how procedure application works.</p>
<p>Application order versus nornal order</p>
<ul>
<li>Application order is to evalute the argument and then apply.</li>
<li>Normal order is to fully expand and then reduce.</li>
</ul>
<p>The most important thing I learned from this chapter is to build abstraction to suppress details, and the interface user should not know how it is happened, he just needs to know how it should be used and what result does this occured. We use <code>black box abstraction</code> to suppress details and make a big problem into a number of subproblems. For a human beings, when we meet problem in building extremely complex system, we can abstract, abstract and abstract, make new language such as domain specific language to solve complex problem.</p>
<p>In Lisp, the syntax is very concise and beautiful, use parentheses to build tree-like programs, and the interpreter can interpret it easily.</p>
<h2 id="Exercise_1-1">Exercise 1.1</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt; <span class="comment">(+ 5 3 4)</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">&gt; <span class="comment">(- 9 1)</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt; <span class="comment">(/ 6 2)</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; <span class="comment">(+ (* 2 4)</span> <span class="comment">(- 4 6)</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt; <span class="comment">(define a 3)</span></span><br><span class="line">&gt; <span class="comment">(define b (+ a 1)</span>)</span><br><span class="line">&gt; <span class="comment">(+ a b (* a b)</span>)</span><br><span class="line"><span class="number">19</span></span><br><span class="line">&gt; <span class="comment">(= a b)</span></span><br><span class="line"><span class="title">#f</span><br><span class="line">&gt; (if (and (&gt; b a) (&lt; b (* a b)))</span><br><span class="line">      b</span><br><span class="line">      a)</span><br><span class="line">4</span></span><br><span class="line">&gt; <span class="comment">(cond ((= a 4)</span> <span class="number">6</span>)</span><br><span class="line">        <span class="comment">((= b 4)</span> <span class="comment">(+ 6 7 a)</span>)</span><br><span class="line">        <span class="comment">(else 25)</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line">&gt; <span class="comment">(+ 2 (if (&gt; b a)</span> b a))</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt; <span class="comment">(* (cond ((&gt; a b)</span> a)</span><br><span class="line">           <span class="comment">((&lt; a b)</span> b)</span><br><span class="line">           <span class="comment">(else -1)</span>)</span><br><span class="line">     <span class="comment">(+ a 1)</span>)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure>
<h2 id="Exercise_1-2">Exercise 1.2</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">4</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">3</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">4</span> <span class="number">5</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">6</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span> <span class="number">7</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h2 id="Exercise_1-3">Exercise 1.3</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum-of-square</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">square</span> a)</span> <span class="list">(<span class="keyword">square</span> b)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">two-larger-sum-of-square</span> a b c)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> a b)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> a c)</span>)</span> <span class="list">(<span class="keyword">sum-of-square</span> b c)</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> b a)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> b c)</span>)</span> <span class="list">(<span class="keyword">sum-of-square</span> a c)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">sum-of-square</span> a b)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h2 id="Exercise_1-4">Exercise 1.4</h2><p>if parameter <code>b</code> is greater than zero, then the <code>if</code> clouse will return operator <code>+</code>, otherwise it will return <code>-</code>.</p>
<h2 id="Exercise_1-5">Exercise 1.5</h2><p>if the interpreter uses <code>applicative-order</code> evaluation, every parameters pass to the function are evaluated immediately. So the <code>p</code> function call it self and never terminate. The interpreter falls into infinite loop.</p>
<p>However, if the intepreter uses <code>normal-order</code> evaluation, the interpreter does not evaluate <code>(test 0 (p))</code> immediately, when the <code>if</code> clouse is sent to the interpreter, the <code>(p)</code> branch will never evaluate.</p>
<h2 id="Exercise_1-6">Exercise 1.6</h2><p><code>if</code> clouse is a different syntax, it is different from <code>new-if</code> function, in this function every branch will be evaluated when passed into the function. So the <code>sqrt-iter</code> branch will never terminate and fall into infinite recursion.</p>
<h2 id="Exercise_1-7">Exercise 1.7</h2><p>The constant in function <code>good-enough?</code> determines this strategy not works well when evaluate a square root of a small number. When the number is very large, the strategy becomes very inefficient, and the procedure works very slow.</p>
<h2 id="Exercise_1-8">Exercise 1.8</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x x)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-iter</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">      guess</span><br><span class="line">      <span class="list">(<span class="keyword">cube-iter</span> <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">                 x)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">average</span> guess <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="list">(<span class="keyword">square</span> guess)</span>)</span> </span><br><span class="line">                       <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> guess)</span>)</span></span><br><span class="line">                    <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">average</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">cube</span> guess)</span> x)</span>)</span> <span class="number">0.001</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cube-iter</span> <span class="number">1.0</span> x)</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Summary">Summary</h1><p>This blog just a summary of what I learned from SICP and the solution I made for exercises.</p>
<p>There are]]>
    </summary>
    
      <category term="SICP" scheme="http://deltax.me/tags/SICP/"/>
    
      <category term="Scheme" scheme="http://deltax.me/tags/Scheme/"/>
    
      <category term="Functional Programming" scheme="http://deltax.me/categories/Functional-Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Persistent Storage with levelDB]]></title>
    <link href="http://deltax.me/2014/12/11/Persistent-Storage-with-levelDB/"/>
    <id>http://deltax.me/2014/12/11/Persistent-Storage-with-levelDB/</id>
    <published>2014-12-11T11:18:56.000Z</published>
    <updated>2015-03-24T17:38:44.000Z</updated>
    <content type="html"><![CDATA[<p><code>LevelDB</code> is a key-value pair database developing by google. Why I use this instead of <code>Core Data</code> which is so widely used.</p>
<p><code>Core Data</code> is a framework deals with data in <code>Cocoa</code>. It is extremly important but compliated. There are many concepts and problems in it. And every time I use <code>Core Data</code> to fetch some datas, I have to write couple lines code.</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">UIAppdelegate</span> *appDelegate = [UIApplication sharedApplication].delegate;</span><br><span class="line"><span class="title">NSManagedObjectContext</span> *appDelegate = ApplicationDelegate.managedObjectContext;</span><br><span class="line"><span class="title">NSError</span> *<span class="built_in">error</span> = nil;</span><br><span class="line"><span class="title">NSFetchRequest</span> *request = [[NSFetchRequest alloc] initWithEntityName:NSStringFromClass([Item class])];</span><br><span class="line"><span class="title">NSArray</span> *items  = [manageContext executeFetchRequest:request <span class="built_in">error</span>:&amp;<span class="built_in">error</span>];</span><br></pre></td></tr></table></figure>
<p>This is so complicated and not elegant. I prefer to use <code>key-value</code> storage instead of it in some situations. When data are not compliated and the relation between models are simple.</p>
<p>I use <code>levelDB</code> this way:</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIAppdelegate *appDelegate = [UIApplication sharedApplication].delegate<span class="comment">;</span></span><br><span class="line">[]appDelegate<span class="preprocessor">.db</span> objectForKey:@<span class="string">"key"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>Just like dictionary and incredible simple to deal with.</p>
<p>Before using <code>LevelDB</code>, the first thing you need to do is downlod repo on github <a href="https://github.com/google/leveldb" target="_blank" rel="external"><code>google/LevelDB</code></a> or type this in terminal</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="string">https:</span><span class="comment">//github.com/google/leveldb.git</span></span><br></pre></td></tr></table></figure>
<p>And then you need to compile it.</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">CXXFLAGS=</span><span class="variable">-stdlib=</span>libstdc++ make <span class="variable">PLATFORM=</span>IOS</span><br></pre></td></tr></table></figure>
<p>Download the wrapper on this <a href="http://www.tanhao.me/pieces/1397.html" target="_blank" rel="external">tanhao</a> Just drag this all in your project.</p>
<p>The prepare work are all done.</p>
<p>But when I you this <code>levelDB</code> to store data, I met some problems, if you want to store some data which is an object, you should make the <code>class</code> of that <code>object</code> to confirm <code>NSCoding</code> protocol.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (id)<span class="string">initWithCoder:</span>(NSCoder *)decoder &#123;</span><br><span class="line">    self = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!self) &#123;</span><br><span class="line">        <span class="keyword">return</span> nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self.avatar = [decoder <span class="string">decodeObjectForKey:</span>@<span class="string">"avatar"</span>];</span><br><span class="line">    self.nickName = [decoder <span class="string">decodeObjectForKey:</span>@<span class="string">"nickName"</span>];</span><br><span class="line">    self.userID = [decoder <span class="string">decodeObjectForKey:</span>@<span class="string">"userID"</span>];</span><br><span class="line">    self.comments = [decoder <span class="string">decodeObjectForKey:</span>@<span class="string">"comments"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="typename">void</span>)<span class="string">encodeWithCoder:</span>(NSCoder *)encoder &#123;</span><br><span class="line">    [encoder <span class="string">encodeObject:</span>self.avatar <span class="string">forKey:</span>@<span class="string">"avatar"</span>];</span><br><span class="line">    [encoder <span class="string">encodeObject:</span>self.nickName <span class="string">forKey:</span>@<span class="string">"nickName"</span>];</span><br><span class="line">    [encoder <span class="string">encodeObject:</span>self.userID <span class="string">forKey:</span>@<span class="string">"userID"</span>];</span><br><span class="line">    [encoder <span class="string">encodeObject:</span>self.comments <span class="string">forKey:</span>@<span class="string">"comments"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You need to implement this two methods, if not when you fetch the object from the data base, the compiler do not know what in it and what is it. So you should <code>encode</code> the object propety before store them. And <code>decode</code> the object when you fetch them. Work similar as <code>NSKeyedArchiver</code>, if we have dozens of property, we have to write code for every property, after I find that I have to solve this problem in this approach. I think I want to write a <code>Meta Propgram</code> in <code>Ruby</code> to deal with this.</p>
<p>And I will do it after my second App on line.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>LevelDB</code> is a key-value pair database developing by google. Why I use this instead of <code>Core Data</code> which is so wide]]>
    </summary>
    
      <category term="Objective-C" scheme="http://deltax.me/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://deltax.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://deltax.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Using AFNetworking <Bug03>]]></title>
    <link href="http://deltax.me/2014/12/03/iOS%20Using%20AFNetworking%20%3CBug03%3E/"/>
    <id>http://deltax.me/2014/12/03/iOS Using AFNetworking <Bug03>/</id>
    <published>2014-12-02T16:56:49.000Z</published>
    <updated>2015-03-24T17:28:43.000Z</updated>
    <content type="html"><![CDATA[<p>During these days development, when I connect our iOS App to Python <code>back-end</code> using <code>AFNetworking</code>, I met an error. It is my first time to use the <code>AFNetworking</code> framework, I am used to use <code>MKNetworking</code> instead, but with some reasons. I planned to use <code>AFNetworking</code> instead. And then, as you see, I met a few problems. </p>
<pre><code>Error: Error Domain=NSCocoaErrorDomain Code=3840 <span class="string">"The operation couldn’t be completed. (Cocoa error 3840.)"</span><span class="function"> (</span>JSON text did<span class="instruction"> not </span>start with<span class="instruction"> array </span>or object<span class="instruction"> and </span>option to allow fragments<span class="instruction"> not </span>set.<span class="function">)</span> UserInfo=0x17697430 {NSDebugDescription=JSON text did<span class="instruction"> not </span>start with<span class="instruction"> array </span>or object<span class="instruction"> and </span>option to allow fragments<span class="instruction"> not </span>set., NSUnderlyingError=0x176f9ec0 
</code></pre><p>At first, I do not know, what it’s mean, but I ask my partner, he tells me, in order to beautify the <code>JSON</code> he use some method, to make them like this, I do not know exactly what he did, but <code>JSON</code> looks like this.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">message</span>": <span class="value"><span class="string">"success"</span></span>, </span><br><span class="line">  "<span class="attribute">posts</span>": <span class="value">[]</span>, </span><br><span class="line">  "<span class="attribute">status</span>": <span class="value"><span class="number">0</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>It is not like the <code>JSON</code> I used to deal with before, I think they should be this shape:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; "<span class="attribute">message</span>": <span class="value"><span class="string">"success"</span></span>, "<span class="attribute">posts</span>": <span class="value">[]</span>,  "<span class="attribute">status</span>": <span class="value"><span class="number">0</span> </span>&#125;</span><br></pre></td></tr></table></figure>
<p>But it’s not, at that time, he explains that if I could not deal with this, he could modify them back. For he can not change this immediately, so I tried to fix this problem.</p>
<p>And then, I find this problem is cuz but my mistakes, I add one more <code>/</code> in the <code>URL</code>. After I fix this. I confidently run my App, and there is also an different error:</p>
<pre><code><span class="setting">NSUnderlyingError=<span class="value"><span class="number">0</span>x156a3e80 <span class="string">"Request failed: unacceptable content-type: text/html"</span></span></span>
</code></pre><p>I search this on google and stackoverflow, someone says add a <code>acceptableContentType</code> to <code>responseSerialzer</code>, someone says to <code>initialize</code> a <code>responseSerailize</code> and change it option to <code>AllowFragment</code>. When I tries them, I find the first solution is right.</p>
<p>I add a <code>acceptableContentType</code> to the <code>responseSerializer</code>, and I fix this. But I think this quiet messy, everytime I use this framework, I had to add an <code>acceptableContentType</code>. I am too naive to realize this as a mistake. So I open an <code>issue</code> on <code>AFNetworking</code> and add this <code>type</code> <code>text/html</code> to the source code.</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.acceptableContentTypes = [NSSet setWithObjects:<span class="variable">@"</span>application/json<span class="string">", @"</span><span class="keyword">text</span>/json<span class="string">", @"</span><span class="keyword">text</span>/javascript<span class="string">", @"</span><span class="keyword">text</span>/html<span class="string">", nil];</span></span><br></pre></td></tr></table></figure>
<p>And soon, the author of <code>AFNetworking</code> reply me as follows:</p>
<pre><code>The solution <span class="keyword">is</span> already built <span class="keyword">into</span> <span class="keyword">the</span> design <span class="keyword">of</span> <span class="keyword">the</span> framework. Patching <span class="keyword">it</span> <span class="keyword">is</span> unnecessary.
</code></pre><p>A little disappointed, but I add this type to my source code, in order to not add this everytime initialize the <code>manager</code>.</p>
<p>Hope this helps. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>During these days development, when I connect our iOS App to Python <code>back-end</code> using <code>AFNetworking</code>, I met an error]]>
    </summary>
    
      <category term="Objective-C" scheme="http://deltax.me/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://deltax.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://deltax.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Combine TabbarController and NavigationController<Bug02>]]></title>
    <link href="http://deltax.me/2014/11/28/iOS%E7%BB%84%E5%90%88TabbarController%E5%92%8CNavigationController%20%3CBug02%3E/"/>
    <id>http://deltax.me/2014/11/28/iOS组合TabbarController和NavigationController <Bug02>/</id>
    <published>2014-11-28T12:36:59.000Z</published>
    <updated>2015-03-24T17:31:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="TabbarController_and_NavigationController">TabbarController and NavigationController</h2><p><code>UINavigationController</code> and <code>UITabBarController</code> are two kinds of container classes in Cocoa. The two controllers are tremendous important in iOS development, we deal with them every day. Even if you are not a developer, just an iOS device user. Almost every thing you see in an iOS App have some relationship with them.</p>
<p>Why are they so important, because of they are container classes, they handle many view controllers in an App. And <code>MVC</code> is the basic design patterns in <code>Cocoa</code> and <code>Cocoa touch</code>.</p>
<p>Personally, I prefer to initialize everything programmingly, not in a storyboard or a nib file. Because I think it is easy to deal with. Sometimes using storyboard or a nib is too simple, but they may cause undetectable crash.</p>
<h2 id="Use_them_Programatically">Use them Programatically</h2><p>The first thing we start an App is set up the project, and I am used to delete the <code>Main.storyboard</code> file first. And add some code to configure the <code>AppDelegate</code>.</p>
<p>The common code you add may be this:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.window</span> = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.window</span><span class="variable">.rootViewController</span> = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> makeKeyAndVisible];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">```	</span><br><span class="line"></span><br><span class="line">Every project without a `storyboard` needs to initialize like <span class="keyword">this</span>. How should we <span class="keyword">do</span> then?</span><br><span class="line"></span><br><span class="line">What should we <span class="keyword">do</span>, <span class="keyword">if</span> we want to set up with a `navigationController`:</span><br></pre></td></tr></table></figure>
<ul>
<li><p>(BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {<br>  // Override point for customization after application launch.<br>  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</p>
<pre><code><span class="built_in">UINavigationController</span> *navigationController = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:[[<span class="built_in">UIViewController</span> alloc] init]];
</code></pre><p>  self.window.rootViewController = navigationController;<br>  [self.window makeKeyAndVisible];<br>  [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];<br>  return YES;<br>}</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">It's quiet simple <span class="keyword">and</span> easy <span class="keyword">to</span> understand, what <span class="keyword">about</span> `tabBarController`:</span><br></pre></td></tr></table></figure>
</li>
<li><p>(BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {<br>  // Override point for customization after application launch.<br>  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</p>
<p>  UIViewController <em>firstViewController = [[UIViewController alloc] init];<br>  UIViewController </em>secondViewController = [[UIViewController alloc] init];<br>  UIViewController *thirdViewController = [[UIViewController alloc] init];</p>
<pre><code>UITabBarController <span class="keyword">*</span>tabBarController = [[UITabBarController alloc] init];        
tabBarController.viewControllers = <span class="comment">@[firstViewController, secondViewController, thirdViewController];</span>
</code></pre><p>  self.window.rootViewController = tabBarController;<br>  [self.window makeKeyAndVisible];<br>  [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];<br>  return YES;<br>}</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Just <span class="keyword">set</span> `tabBarController`<span class="comment">'s property `viewControllers` to proper `viewController`.</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">##Why combine TabBarController and NavigationController</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you want <span class="keyword">to</span> switch <span class="keyword">to</span> another view <span class="keyword">from</span> one <span class="keyword">of</span> `tabBarController`, you can <span class="keyword">not</span> <span class="keyword">do</span> it <span class="keyword">with</span> a <span class="built_in">single</span> `tabBarController`. Because you need a stack <span class="keyword">to</span> manage all <span class="keyword">of</span> your controllers. <span class="keyword">If</span> you <span class="keyword">not</span> have one, the system <span class="keyword">do</span> <span class="keyword">not</span> know which view controller will display after this view pop <span class="keyword">from</span> the window.</span><br><span class="line"></span><br><span class="line">So we need <span class="keyword">to</span> combine them, <span class="keyword">in</span> my first project, I <span class="keyword">do</span> this <span class="keyword">in</span> this way:</span><br></pre></td></tr></table></figure>
</li>
<li><p>(BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {<br>  // Override point for customization after application launch.<br>  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</p>
<p>  UIViewController <em>firstViewController = [[UIViewController alloc] init];<br>  UIViewController </em>secondViewController = [[UIViewController alloc] init];<br>  UIViewController *thirdViewController = [[UIViewController alloc] init];</p>
<pre><code>UITabBarController <span class="keyword">*</span>tabBarController = [[UITabBarController alloc] init];        
tabBarController.viewControllers = <span class="comment">@[firstViewController, secondViewController, thirdViewController];</span>
UINavigationController <span class="keyword">*</span>navigationController = [[UINavigationControlle alloc] initWithRootViewController:tabBarController];
</code></pre><p>  self.window.rootViewController = tabBarController;<br>  [self.window makeKeyAndVisible];<br>  [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];<br>  return YES;<br>}</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">When I did <span class="keyword">this</span>, I <span class="keyword">do</span> <span class="keyword">not</span> consider about other thing, because the apple developer <span class="built_in">document</span> use <span class="keyword">this</span> <span class="attribute">approach</span>:</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>UIViewController <em>firstViewController = [[UIViewController alloc] init];<br>UIViewController </em>secondViewController = [[UIViewController alloc] init];<br>UIViewController <em>thirdViewController = [[UIViewController alloc] init];<br>UIViewController </em>rootViewController = [[UIViewController alloc] init];<br>UINavigationController* navController = [[UINavigationController alloc]                         initWithRootViewController:rootViewController];</p>
<p>NSArray* controllers = [NSArray arrayWithObjects:firstViewController, secondViewController, thirdViewController, navController, nil];</p>
<p>UITabBarController *tabBarController = [[UITabBarController alloc] init];<br>tabBarController.viewControllers = controllers;</p>
<p>self.window.rootViewController = tabBarController;<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">I just think this is a silly way. if I imitate this, **<span class="operator"><span class="keyword">Do</span> I need <span class="keyword">to</span> initialize five navigation controllers <span class="keyword">each</span> <span class="keyword">with</span> a <span class="keyword">view</span> controller?**</span><br><span class="line"></span><br><span class="line">The answer <span class="keyword">is</span> <span class="keyword">right</span>. I need <span class="keyword">to</span> <span class="keyword">do</span> so. Why? <span class="keyword">After</span> I imitate this approach, my previous approach has <span class="keyword">some</span> side effects.</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Sometimes you reference <span class="string">`navigationController`</span> <span class="keyword">with</span> <span class="string">`self`</span>, you may <span class="keyword">get</span> a <span class="literal">null</span>. Because the five viewController <span class="keyword">are</span> bot pushed <span class="keyword">on</span> the stack.</span><br><span class="line"><span class="number">2.</span> <span class="keyword">If</span> you <span class="keyword">change</span> <span class="string">`navigationBar`</span> <span class="keyword">in</span> one tab, <span class="keyword">as</span> you swich <span class="keyword">to</span> another, <span class="keyword">all</span> the <span class="string">`navigationBar`</span> <span class="keyword">are</span> <span class="keyword">changed</span>. Because they <span class="keyword">are</span> just one <span class="string">`navigationController`</span> <span class="keyword">and</span> it just have <span class="keyword">only</span> one <span class="string">`navigatonBar`</span>.</span><br><span class="line"><span class="number">3.</span> <span class="keyword">If</span> you <span class="string">`pushViewController`</span> <span class="keyword">from</span> one <span class="keyword">of</span> <span class="string">`tabBarController`</span><span class="string">'s `viewControllers`, tab bar will disapper, you will not see it, because `tabBarController` is not the `rootViewController`, it just in the stack with its `tabBar`.</span><br><span class="line"></span><br><span class="line">So the verbose but correct approach is this:</span></span></span><br></pre></td></tr></table></figure></p>
<p>UIViewController <em>firstViewController = [[UIViewController alloc] init];<br>UIViewController </em>secondViewController = [[UIViewController alloc] init];<br>UIViewController <em>thirdViewController = [[UIViewController alloc] init];<br>UINavigationController </em>firstNavigationController = [[UINavigationController alloc]<br>                     initWithRootViewController:rootViewController];<br>UINavigationController <em>secondNavigationController = [[UINavigationController alloc]<br>                     initWithRootViewController:rootViewController];<br>UINavigationController </em>thirdNavigationController = [[UINavigationController alloc]<br>                     initWithRootViewController:rootViewController];</p>
<p>NSArray* controllers = [NSArray arrayWithObjects:firstNavigationController, secondNavigationController, thirdNavigationController, nil];</p>
<p>UITabBarController *tabBarController = [[UITabBarController alloc] init];<br>tabBarController.viewControllers = controllers;</p>
<p>self.window.rootViewController = tabBarController;<br>```</p>
<p>PS: <code>navigationBar</code> is damn difficult to use. Hope this help.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="TabbarController_and_NavigationController">TabbarController and NavigationController</h2><p><code>UINavigationController</code> and ]]>
    </summary>
    
      <category term="Objective-C" scheme="http://deltax.me/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://deltax.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://deltax.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lists and Patterns Matching]]></title>
    <link href="http://deltax.me/2014/11/26/Lists-and-Patterns-Matching/"/>
    <id>http://deltax.me/2014/11/26/Lists-and-Patterns-Matching/</id>
    <published>2014-11-26T07:57:59.000Z</published>
    <updated>2015-03-24T17:34:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Recursive_computations">Recursive computations</h2><p>递归的计算模型是声明式编程的核心, 有些人可能并不知道, 类型也是可以递归的. 比如说列表.</p>
<h3 id="List">List</h3><p>列表是在函数式编程中是很有趣的, 也是很强大的, 大多数函数式编程语言都支持列表, 比如<code>Haskell</code>, <code>ML</code>, <code>Scheme</code>. 列表. 列表与<code>C</code>, <code>Java</code>, <code>Objective-C</code> 语言中的<code>array</code>非常的相似, 但是却有着很大的不同. </p>
<p>列表是一种递归的数据类型:</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% <span class="type">Xs</span> <span class="type">Xr</span> 是列表</span><br><span class="line"><span class="type">Xs</span> =&gt; <span class="literal">nil</span></span><br><span class="line"><span class="type">Xr</span> =&gt; <span class="type">X</span>|<span class="type">Xr</span></span><br></pre></td></tr></table></figure>
<p>我们使用上下文无关文案表示列表在核心语言中的语法的表示.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">List</span>&gt;</span> ::=  nil</span><br><span class="line">		 	|   <span class="tag">&lt;<span class="title">T</span>&gt;</span> `|` <span class="tag">&lt;<span class="title">List</span> <span class="attribute">T</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>列表可以由<code>nil</code>开始, 不挺的重复自己, 直到列表结束<code>&lt;List&gt; =&gt; nil</code>.</p>
<p>我们也可以使用这种方式表示其他更复杂的数据类型, 比如说<code>binary tree</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">BTree</span> <span class="attribute">T</span>&gt;</span>  ::= leaf</span><br><span class="line">			|  tree(key: <span class="tag">&lt;<span class="title">Literal</span>&gt;</span> value: T</span><br><span class="line">					left: <span class="tag">&lt;<span class="title">BTree</span> <span class="attribute">T</span>&gt;</span> right: <span class="tag">&lt;<span class="title">BTree</span> <span class="attribute">T</span>&gt;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Haskell">Haskell</h4><p>在<code>Haskell</code>中, 列表是一种单类型的数据结构, 可以用来存储多个类型的东西, 同时它还可以嵌套. 简单展示一下<code>Haskell</code>中的列表吧:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr_selector">[1,2,3,4,5]</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">//嵌套列表</span></span><br><span class="line"><span class="attr_selector">[[1,2,3,4]</span>,<span class="attr_selector">[5,6,7,8]</span>,<span class="attr_selector">[9,10,11,12]</span>]</span><br></pre></td></tr></table></figure>
<p>访问列表中的元素, 有两种基本的方法, 在<code>Haskell</code>中一种是<code>head</code>访问数组的头部, 一种的<code>tail</code>返回列表的尾部.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">head [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  =&gt; <span class="number">1</span></span><br><span class="line">	tail [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  =&gt; [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">head [<span class="number">1</span>,<span class="number">2</span>] =&gt; <span class="number">1</span></span><br><span class="line">tail [<span class="number">1</span>,<span class="number">2</span>] =&gt; [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">head [<span class="number">2</span>] =&gt; <span class="number">2</span></span><br><span class="line">tail [<span class="number">2</span>] =&gt; <span class="literal">[]</span></span><br></pre></td></tr></table></figure>
<p>有几点注意的是, 这两个函数都只能对列表进行操作, <code>head</code>返回的是列表中的一个元素, 而<code>tail</code>返回的是一个<strong>列表</strong>. 尤其注意后面的两种情况.</p>
<p>在<code>Haskell</code>中呢, 有一种更强大过滤组合列表的方式, 叫做<code>list comprehension</code>列表推导, 我们可以使用列表推导轻松的完成快速排序的实现.</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">quicksort ::</span> (Ord <span class="literal">a</span>) =&gt; [<span class="literal">a</span>] -&gt; [<span class="literal">a</span>]  </span><br><span class="line">quicksort [] = []  </span><br><span class="line"><span class="label">quicksort (x:</span>xs) =   </span><br><span class="line">    let smallerSorted = quicksort [<span class="literal">a</span> | <span class="literal">a</span> &lt;- xs, <span class="literal">a</span> &lt;= x]  </span><br><span class="line">        biggerSorted = quicksort [<span class="literal">a</span> | <span class="literal">a</span> &lt;- xs, <span class="literal">a</span> &gt; x]  </span><br><span class="line">    in  smallerSorted ++ [x] ++ biggerSorted</span><br></pre></td></tr></table></figure>
<p>这段代码就是用列表推导完成了使用其他语言需要几倍代码量才能完成的快速排序.</p>
<h4 id="Scheme">Scheme</h4><p><code>Scheme</code>是<code>Lisp</code>主要的两种方言之一. 它与<code>lambda</code>演算的关系相当的密切, <code>Scheme</code>中的有两种方式构造一个列表.</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; This is just a syntax sugar</span></span><br><span class="line"><span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></span><br></pre></td></tr></table></figure>
<p><code>Scheme</code>中对列表的操作, 使用<code>car</code>和<code>cdr</code>, 用法基本与<code>Haskell</code>中的<code>head</code>和<code>tail</code>一样.</p>
<h4 id="Oz">Oz</h4><p><code>Oz</code>是在<code>CTMCP</code>一书中提到的用于研究的语言, 我们使用它来展示列表是如何工作和使用的.</p>
<figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 列表的声明</span></span><br><span class="line">	<span class="variable">L</span> = [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% car 方法</span></span><br><span class="line"><span class="variable">L</span>.<span class="number">1</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% cdr 方法</span></span><br><span class="line"><span class="variable">L</span>.<span class="number">2</span> = [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p>我们也可以使用<code>|</code>操作符创建列表</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = <span class="number">5</span><span class="string">|6|7|8|nil</span></span><br></pre></td></tr></table></figure>
<h2 id="Programming_with_Lists">Programming with Lists</h2><p>因为列表简单的结构, 使用它们进行声明式编程是非常简单和强大的.</p>
<ul>
<li>递归式的思考, 解决问题的更小一部分.</li>
<li>将递归式的计算模型转化为迭代式的计算模型.</li>
<li>校正迭代式的计算模型.</li>
<li>遵循类型来构建程序.</li>
</ul>
<h3 id="Pattern_Matching">Pattern Matching</h3><p>模式匹配同样是<code>FP</code>中强大的特性, 我们可以使用它来代替<code>car</code>和<code>cdr</code>方法同时获取列表的头部和尾部, 避免使用<code>if</code>条件.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% <span class="keyword">display</span> 5 and [6 7 8]</span><br><span class="line">declare<span class="keyword">L</span>=[5 6 7 8]case <span class="keyword">L</span> of <span class="keyword">H</span>|T then &#123;<span class="keyword">Browse</span> <span class="keyword">H</span>&#125; &#123;<span class="keyword">Browse</span> T&#125; end</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Recursive_computations">Recursive computations</h2><p>递归的计算模型是声明式编程的核心, 有些人可能并不知道, 类型也是可以递归的. 比如说列表.</p>
<h3 id="List">List</h3><p>列]]>
    </summary>
    
      <category term="Haskell" scheme="http://deltax.me/tags/Haskell/"/>
    
      <category term="ML" scheme="http://deltax.me/tags/ML/"/>
    
      <category term="Functional Programming" scheme="http://deltax.me/categories/Functional-Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Iteration versus Recursion]]></title>
    <link href="http://deltax.me/2014/11/24/Iterative-versus-Recursive/"/>
    <id>http://deltax.me/2014/11/24/Iterative-versus-Recursive/</id>
    <published>2014-11-24T13:25:57.000Z</published>
    <updated>2015-03-24T17:33:17.000Z</updated>
    <content type="html"><![CDATA[<p><code>Iteration</code> 和 <code>Recursion</code> 在我们所有的编程语言中都是非常重要的概念, 尤其是在声明式的编程模型中.</p>
<h2 id="Iteraive_computation">Iteraive computation</h2><p>迭代的计算模型是一个<code>stack</code>大小为<code>constant</code>并且大小保持不变的循环.</p>
<p>非常重要的地方就是, 迭代的计算模型拥有一个初始的状态<code>S 0</code>, 在经过多次的转换最后会得到<code>S final</code>:</p>
<pre><code>S0 -&gt; S1 -&gt; <span class="keyword">...</span> -&gt; Sfinal
</code></pre><p>这种思想的通用的表示可以被总结为如下的形式:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> state)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> state)</span></span><br><span class="line">		state</span><br><span class="line">		<span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword"><span class="built_in">next</span></span> state)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>在这个模式中, 函数<code>good-enough?</code>和<code>next</code>依赖于相应的问题. 我们使用<code>Newton&#39;s method</code>求平方根来验证这个迭代的计算模型.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> x)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iter</span> guess x)</span></span><br><span class="line">		<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">			guess</span><br><span class="line">			<span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">improve</span> guess x)</span> x)</span>)</span>)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">		<span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> guess <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x guess)</span>)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">		<span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> x <span class="list">(<span class="keyword"><span class="built_in">*</span></span> guess guess)</span>)</span>)</span> <span class="number">0.00001</span>)</span>)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> x <span class="number">0</span>)</span> <span class="list">(<span class="keyword">-x</span>)</span> x)</span>)</span></span><br><span class="line">	<span class="list">(<span class="keyword">iter</span> <span class="number">1.0</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
<p>这就是我们使用迭代式的计算模型使用<code>Newton&#39;s method</code>求平方根的方法.</p>
<h3 id="Control_abstraction">Control abstraction</h3><p>上面所提到的帮助我们设计高效的程序, 但是它并不是一种计算模型, 我们接下来提供一种通用的表示作为其他程序组成的一部分, 通过将其中的两部分提取出来, 然后作为函数的参数, 把这种通用的模式转化成一种控制的抽象.</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> state good-enough? next)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> state)</span></span><br><span class="line">		state</span><br><span class="line">		<span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword"><span class="built_in">next</span></span> state)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>当我们使用这种控制抽象的时候, 需要为他提供<code>good-enough?</code>和<code>next</code>这两个函数, 每个函数带有一个参数. 将函数像参数一样传递给其他函数的技术叫做<code>higher-order programming</code>.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> x)</span></span><br><span class="line">	<span class="list">(<span class="keyword">iter</span> <span class="number">1.0</span> </span><br><span class="line">		  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">guess</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> x <span class="list">(<span class="keyword"><span class="built_in">*</span></span> guess guess)</span>)</span>)</span> x)</span> <span class="number">0.00001</span>)</span>)</span></span><br><span class="line">		  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">guess</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> guess <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x guess)</span>)</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>使用两个匿名函数作为参数传给<code>iter</code>. 这是一种非常强大的组织程序的方式, 因为它把通用的控制流和特殊用法分离. 如果一种抽象经常使用, 我们可以将它更近一步, 将它转化为语言抽象.</p>
<hr>
<h2 id="Recursive_computation">Recursive computation</h2><p>迭代式的计算模型实际上是特殊的递归抽象模型. 递归函数可以在自己的函数体内部的任何地方多次调用自己. 在编程中, 递归多出现在函数以及数据类型中.</p>
<p>递归函数在调用时, 本身的<code>stack</code>大小会越来越大, 然后随着达到临界条件, <code>stack</code>的大小才会缩小, 直至返回结果. 我们使用最经典的例子<code>factorical</code>来演示递归函数<code>stack</code>的大小是如何改变的.</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 当计算(factorical 4)时</span><br><span class="line">(factorical 4)</span><br><span class="line">(<span class="keyword">*</span> 4 (factorical 3))</span><br><span class="line">(<span class="keyword">*</span> 4 (<span class="keyword">*</span> 3 (factorical 2)))</span><br><span class="line">(<span class="keyword">*</span> 4 (<span class="keyword">*</span> 3 (<span class="keyword">*</span> 2 (factorical 1))))</span><br><span class="line">(<span class="keyword">*</span> 4 (<span class="keyword">*</span> 3 (<span class="keyword">*</span> 2 (<span class="keyword">*</span> 1 (factorical 0)))))</span><br><span class="line">(<span class="keyword">*</span> 4 (<span class="keyword">*</span> 3 (<span class="keyword">*</span> 2 (<span class="keyword">*</span> 1 1))))</span><br><span class="line">(<span class="keyword">*</span> 4 (<span class="keyword">*</span> 3 (<span class="keyword">*</span> 2 1)))</span><br><span class="line">(<span class="keyword">*</span> 4 (<span class="keyword">*</span> 3 2))</span><br><span class="line">(<span class="keyword">*</span> 4 6)</span><br><span class="line">(24)</span><br></pre></td></tr></table></figure>
<p>我们可以从代码所占的大小中就可以轻易的看出当调用递归函数时<code>stack</code>大小的变化. 当我们使用迭代式的<code>factorical</code>时:</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当计算(factorical 4 1)时</span></span><br><span class="line"><span class="comment">(factorical 4 1)</span></span><br><span class="line"><span class="comment">(factorical 3 4)</span></span><br><span class="line"><span class="comment">(factorical 2 12)</span></span><br><span class="line"><span class="comment">(factorical 1 24)</span></span><br><span class="line"><span class="comment">(factorical 0 24)</span></span><br><span class="line"><span class="comment">(24)</span></span><br></pre></td></tr></table></figure>
<p>迭代式的函数的调用所占用的空间是<strong>线性</strong>的. 但是迭代函数的定义相对递归函数表达的意思并不清楚, 需要理解, 递归函数的定义非常清楚.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">factorical</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">0</span>)</span></span><br><span class="line">		<span class="number">1</span></span><br><span class="line">		<span class="list">(<span class="keyword"><span class="built_in">*</span></span> n <span class="list">(<span class="keyword">factorical</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>与数学上的定义是完全相同的.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fact</span> 0 = 1</span><br><span class="line"><span class="keyword">fact</span> <span class="keyword">n</span> = <span class="keyword">n</span> * <span class="keyword">fact</span> <span class="keyword">n</span>-1</span><br></pre></td></tr></table></figure>
<h3 id="Converting_a_recursive_to_an_iterative_computation">Converting a recursive to an iterative computation</h3><p>虽然递归有着更好的表达能力, 但是当有性能(时间和空间)上的需求时, 我们通常使用迭代式的计算模型代替递归式的计算模型. 其实就是做如下的转换:</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R = (5<span class="keyword">*</span>(4<span class="keyword">*</span>(3<span class="keyword">*</span>(2<span class="keyword">*</span>(1<span class="keyword">*</span>1))))) =&gt; R = (((((1<span class="keyword">*</span>5)<span class="keyword">*</span>4)<span class="keyword">*</span>3)<span class="keyword">*</span>2)<span class="keyword">*</span>1)</span><br><span class="line"></span><br><span class="line">(define (factorical n)</span><br><span class="line">	(define (iter n acc)</span><br><span class="line">		(if (= n 0)</span><br><span class="line">			acc</span><br><span class="line">			(iter (- n 1) (<span class="keyword">*</span> acc n)))))</span><br><span class="line">	(iter n 1))</span><br></pre></td></tr></table></figure>
<p>以上重构的函数就是使用迭代的思想, 通常将递归转化为迭代遵循以下的规律:</p>
<ol>
<li>需要一个辅助函数, 这里就是<code>iter</code>.</li>
<li>需要一个或多个<code>accumulator</code>来保存函数调用过程中需要保存的状态, 在这里就是<code>acc</code>保存了每次调用<code>*</code>之后的值.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>Iteration</code> 和 <code>Recursion</code> 在我们所有的编程语言中都是非常重要的概念, 尤其是在声明式的编程模型中.</p>
<h2 id="Iteraive_computation">Iteraive computati]]>
    </summary>
    
      <category term="Scheme" scheme="http://deltax.me/tags/Scheme/"/>
    
      <category term="Functional Programming" scheme="http://deltax.me/categories/Functional-Programming/"/>
    
  </entry>
  
</feed>